/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Provides insights and recommendations for cloud customers for various
 *  categories like performance optimization, cost savings, reliability, feature
 *  discovery, etc. Insights and recommendations are generated automatically
 *  based on analysis of user resources, configuration and monitoring metrics.
 * @class
 * @memberof v1
 */
export declare class RecommenderClient {
    private _terminated;
    private _opts;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    recommenderStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of RecommenderClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    getInsight(request: protos.google.cloud.recommender.v1.IGetInsightRequest, options?: CallOptions): Promise<[protos.google.cloud.recommender.v1.IInsight, protos.google.cloud.recommender.v1.IGetInsightRequest | undefined, {} | undefined]>;
    getInsight(request: protos.google.cloud.recommender.v1.IGetInsightRequest, options: CallOptions, callback: Callback<protos.google.cloud.recommender.v1.IInsight, protos.google.cloud.recommender.v1.IGetInsightRequest | null | undefined, {} | null | undefined>): void;
    getInsight(request: protos.google.cloud.recommender.v1.IGetInsightRequest, callback: Callback<protos.google.cloud.recommender.v1.IInsight, protos.google.cloud.recommender.v1.IGetInsightRequest | null | undefined, {} | null | undefined>): void;
    markInsightAccepted(request: protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest, options?: CallOptions): Promise<[protos.google.cloud.recommender.v1.IInsight, (protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest | undefined), {} | undefined]>;
    markInsightAccepted(request: protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest, options: CallOptions, callback: Callback<protos.google.cloud.recommender.v1.IInsight, protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest | null | undefined, {} | null | undefined>): void;
    markInsightAccepted(request: protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest, callback: Callback<protos.google.cloud.recommender.v1.IInsight, protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest | null | undefined, {} | null | undefined>): void;
    getRecommendation(request: protos.google.cloud.recommender.v1.IGetRecommendationRequest, options?: CallOptions): Promise<[protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IGetRecommendationRequest | undefined, {} | undefined]>;
    getRecommendation(request: protos.google.cloud.recommender.v1.IGetRecommendationRequest, options: CallOptions, callback: Callback<protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IGetRecommendationRequest | null | undefined, {} | null | undefined>): void;
    getRecommendation(request: protos.google.cloud.recommender.v1.IGetRecommendationRequest, callback: Callback<protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IGetRecommendationRequest | null | undefined, {} | null | undefined>): void;
    markRecommendationClaimed(request: protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest, options?: CallOptions): Promise<[protos.google.cloud.recommender.v1.IRecommendation, (protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest | undefined), {} | undefined]>;
    markRecommendationClaimed(request: protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest, options: CallOptions, callback: Callback<protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest | null | undefined, {} | null | undefined>): void;
    markRecommendationClaimed(request: protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest, callback: Callback<protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest | null | undefined, {} | null | undefined>): void;
    markRecommendationSucceeded(request: protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest, options?: CallOptions): Promise<[protos.google.cloud.recommender.v1.IRecommendation, (protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest | undefined), {} | undefined]>;
    markRecommendationSucceeded(request: protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest, options: CallOptions, callback: Callback<protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest | null | undefined, {} | null | undefined>): void;
    markRecommendationSucceeded(request: protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest, callback: Callback<protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest | null | undefined, {} | null | undefined>): void;
    markRecommendationFailed(request: protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest, options?: CallOptions): Promise<[protos.google.cloud.recommender.v1.IRecommendation, (protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest | undefined), {} | undefined]>;
    markRecommendationFailed(request: protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest, options: CallOptions, callback: Callback<protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest | null | undefined, {} | null | undefined>): void;
    markRecommendationFailed(request: protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest, callback: Callback<protos.google.cloud.recommender.v1.IRecommendation, protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest | null | undefined, {} | null | undefined>): void;
    listInsights(request: protos.google.cloud.recommender.v1.IListInsightsRequest, options?: CallOptions): Promise<[protos.google.cloud.recommender.v1.IInsight[], protos.google.cloud.recommender.v1.IListInsightsRequest | null, protos.google.cloud.recommender.v1.IListInsightsResponse]>;
    listInsights(request: protos.google.cloud.recommender.v1.IListInsightsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.recommender.v1.IListInsightsRequest, protos.google.cloud.recommender.v1.IListInsightsResponse | null | undefined, protos.google.cloud.recommender.v1.IInsight>): void;
    listInsights(request: protos.google.cloud.recommender.v1.IListInsightsRequest, callback: PaginationCallback<protos.google.cloud.recommender.v1.IListInsightsRequest, protos.google.cloud.recommender.v1.IListInsightsResponse | null | undefined, protos.google.cloud.recommender.v1.IInsight>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The container resource on which to execute the request.
     *   Acceptable formats:
     *
     *   1.
     *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]",
     *
     *   LOCATION here refers to GCP Locations:
     *   https://cloud.google.com/about/locations/
     *   INSIGHT_TYPE_ID refers to supported insight types:
     *   https://cloud.google.com/recommender/docs/insights/insight-types.)
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of results to return from this request.  Non-positive
     *   values are ignored. If not specified, the server will determine the number
     *   of results to return.
     * @param {string} [request.pageToken]
     *   Optional. If present, retrieves the next batch of results from the preceding call to
     *   this method. `page_token` must be the value of `next_page_token` from the
     *   previous response. The values of other method parameters must be identical
     *   to those in the previous call.
     * @param {string} [request.filter]
     *   Optional. Filter expression to restrict the insights returned. Supported
     *   filter fields: state
     *   Eg: `state:"DISMISSED" or state:"ACTIVE"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Insight]{@link google.cloud.recommender.v1.Insight} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listInsightsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listInsightsStream(request?: protos.google.cloud.recommender.v1.IListInsightsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listInsights`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The container resource on which to execute the request.
     *   Acceptable formats:
     *
     *   1.
     *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]",
     *
     *   LOCATION here refers to GCP Locations:
     *   https://cloud.google.com/about/locations/
     *   INSIGHT_TYPE_ID refers to supported insight types:
     *   https://cloud.google.com/recommender/docs/insights/insight-types.)
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of results to return from this request.  Non-positive
     *   values are ignored. If not specified, the server will determine the number
     *   of results to return.
     * @param {string} [request.pageToken]
     *   Optional. If present, retrieves the next batch of results from the preceding call to
     *   this method. `page_token` must be the value of `next_page_token` from the
     *   previous response. The values of other method parameters must be identical
     *   to those in the previous call.
     * @param {string} [request.filter]
     *   Optional. Filter expression to restrict the insights returned. Supported
     *   filter fields: state
     *   Eg: `state:"DISMISSED" or state:"ACTIVE"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Insight]{@link google.cloud.recommender.v1.Insight}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listInsightsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listInsightsAsync(request?: protos.google.cloud.recommender.v1.IListInsightsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.recommender.v1.IInsight>;
    listRecommendations(request: protos.google.cloud.recommender.v1.IListRecommendationsRequest, options?: CallOptions): Promise<[protos.google.cloud.recommender.v1.IRecommendation[], protos.google.cloud.recommender.v1.IListRecommendationsRequest | null, protos.google.cloud.recommender.v1.IListRecommendationsResponse]>;
    listRecommendations(request: protos.google.cloud.recommender.v1.IListRecommendationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.recommender.v1.IListRecommendationsRequest, protos.google.cloud.recommender.v1.IListRecommendationsResponse | null | undefined, protos.google.cloud.recommender.v1.IRecommendation>): void;
    listRecommendations(request: protos.google.cloud.recommender.v1.IListRecommendationsRequest, callback: PaginationCallback<protos.google.cloud.recommender.v1.IListRecommendationsRequest, protos.google.cloud.recommender.v1.IListRecommendationsResponse | null | undefined, protos.google.cloud.recommender.v1.IRecommendation>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The container resource on which to execute the request.
     *   Acceptable formats:
     *
     *   1.
     *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]",
     *
     *   LOCATION here refers to GCP Locations:
     *   https://cloud.google.com/about/locations/
     *   RECOMMENDER_ID refers to supported recommenders:
     *   https://cloud.google.com/recommender/docs/recommenders.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of results to return from this request.  Non-positive
     *   values are ignored. If not specified, the server will determine the number
     *   of results to return.
     * @param {string} [request.pageToken]
     *   Optional. If present, retrieves the next batch of results from the preceding call to
     *   this method. `page_token` must be the value of `next_page_token` from the
     *   previous response. The values of other method parameters must be identical
     *   to those in the previous call.
     * @param {string} request.filter
     *   Filter expression to restrict the recommendations returned. Supported
     *   filter fields: state_info.state
     *   Eg: `state_info.state:"DISMISSED" or state_info.state:"FAILED"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Recommendation]{@link google.cloud.recommender.v1.Recommendation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRecommendationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listRecommendationsStream(request?: protos.google.cloud.recommender.v1.IListRecommendationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listRecommendations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The container resource on which to execute the request.
     *   Acceptable formats:
     *
     *   1.
     *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]",
     *
     *   LOCATION here refers to GCP Locations:
     *   https://cloud.google.com/about/locations/
     *   RECOMMENDER_ID refers to supported recommenders:
     *   https://cloud.google.com/recommender/docs/recommenders.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of results to return from this request.  Non-positive
     *   values are ignored. If not specified, the server will determine the number
     *   of results to return.
     * @param {string} [request.pageToken]
     *   Optional. If present, retrieves the next batch of results from the preceding call to
     *   this method. `page_token` must be the value of `next_page_token` from the
     *   previous response. The values of other method parameters must be identical
     *   to those in the previous call.
     * @param {string} request.filter
     *   Filter expression to restrict the recommendations returned. Supported
     *   filter fields: state_info.state
     *   Eg: `state_info.state:"DISMISSED" or state_info.state:"FAILED"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Recommendation]{@link google.cloud.recommender.v1.Recommendation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listRecommendationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listRecommendationsAsync(request?: protos.google.cloud.recommender.v1.IListRecommendationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.recommender.v1.IRecommendation>;
    /**
     * Return a fully-qualified billingAccountLocationInsightType resource name string.
     *
     * @param {string} billing_account
     * @param {string} location
     * @param {string} insight_type
     * @returns {string} Resource name string.
     */
    billingAccountLocationInsightTypePath(billingAccount: string, location: string, insightType: string): string;
    /**
     * Parse the billing_account from BillingAccountLocationInsightType resource.
     *
     * @param {string} billingAccountLocationInsightTypeName
     *   A fully-qualified path representing billing_account_location_insight_type resource.
     * @returns {string} A string representing the billing_account.
     */
    matchBillingAccountFromBillingAccountLocationInsightTypeName(billingAccountLocationInsightTypeName: string): string | number;
    /**
     * Parse the location from BillingAccountLocationInsightType resource.
     *
     * @param {string} billingAccountLocationInsightTypeName
     *   A fully-qualified path representing billing_account_location_insight_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBillingAccountLocationInsightTypeName(billingAccountLocationInsightTypeName: string): string | number;
    /**
     * Parse the insight_type from BillingAccountLocationInsightType resource.
     *
     * @param {string} billingAccountLocationInsightTypeName
     *   A fully-qualified path representing billing_account_location_insight_type resource.
     * @returns {string} A string representing the insight_type.
     */
    matchInsightTypeFromBillingAccountLocationInsightTypeName(billingAccountLocationInsightTypeName: string): string | number;
    /**
     * Return a fully-qualified billingAccountLocationInsightTypeInsight resource name string.
     *
     * @param {string} billing_account
     * @param {string} location
     * @param {string} insight_type
     * @param {string} insight
     * @returns {string} Resource name string.
     */
    billingAccountLocationInsightTypeInsightPath(billingAccount: string, location: string, insightType: string, insight: string): string;
    /**
     * Parse the billing_account from BillingAccountLocationInsightTypeInsight resource.
     *
     * @param {string} billingAccountLocationInsightTypeInsightName
     *   A fully-qualified path representing billing_account_location_insight_type_insight resource.
     * @returns {string} A string representing the billing_account.
     */
    matchBillingAccountFromBillingAccountLocationInsightTypeInsightName(billingAccountLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the location from BillingAccountLocationInsightTypeInsight resource.
     *
     * @param {string} billingAccountLocationInsightTypeInsightName
     *   A fully-qualified path representing billing_account_location_insight_type_insight resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBillingAccountLocationInsightTypeInsightName(billingAccountLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the insight_type from BillingAccountLocationInsightTypeInsight resource.
     *
     * @param {string} billingAccountLocationInsightTypeInsightName
     *   A fully-qualified path representing billing_account_location_insight_type_insight resource.
     * @returns {string} A string representing the insight_type.
     */
    matchInsightTypeFromBillingAccountLocationInsightTypeInsightName(billingAccountLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the insight from BillingAccountLocationInsightTypeInsight resource.
     *
     * @param {string} billingAccountLocationInsightTypeInsightName
     *   A fully-qualified path representing billing_account_location_insight_type_insight resource.
     * @returns {string} A string representing the insight.
     */
    matchInsightFromBillingAccountLocationInsightTypeInsightName(billingAccountLocationInsightTypeInsightName: string): string | number;
    /**
     * Return a fully-qualified billingAccountLocationRecommender resource name string.
     *
     * @param {string} billing_account
     * @param {string} location
     * @param {string} recommender
     * @returns {string} Resource name string.
     */
    billingAccountLocationRecommenderPath(billingAccount: string, location: string, recommender: string): string;
    /**
     * Parse the billing_account from BillingAccountLocationRecommender resource.
     *
     * @param {string} billingAccountLocationRecommenderName
     *   A fully-qualified path representing billing_account_location_recommender resource.
     * @returns {string} A string representing the billing_account.
     */
    matchBillingAccountFromBillingAccountLocationRecommenderName(billingAccountLocationRecommenderName: string): string | number;
    /**
     * Parse the location from BillingAccountLocationRecommender resource.
     *
     * @param {string} billingAccountLocationRecommenderName
     *   A fully-qualified path representing billing_account_location_recommender resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBillingAccountLocationRecommenderName(billingAccountLocationRecommenderName: string): string | number;
    /**
     * Parse the recommender from BillingAccountLocationRecommender resource.
     *
     * @param {string} billingAccountLocationRecommenderName
     *   A fully-qualified path representing billing_account_location_recommender resource.
     * @returns {string} A string representing the recommender.
     */
    matchRecommenderFromBillingAccountLocationRecommenderName(billingAccountLocationRecommenderName: string): string | number;
    /**
     * Return a fully-qualified billingAccountLocationRecommenderRecommendation resource name string.
     *
     * @param {string} billing_account
     * @param {string} location
     * @param {string} recommender
     * @param {string} recommendation
     * @returns {string} Resource name string.
     */
    billingAccountLocationRecommenderRecommendationPath(billingAccount: string, location: string, recommender: string, recommendation: string): string;
    /**
     * Parse the billing_account from BillingAccountLocationRecommenderRecommendation resource.
     *
     * @param {string} billingAccountLocationRecommenderRecommendationName
     *   A fully-qualified path representing billing_account_location_recommender_recommendation resource.
     * @returns {string} A string representing the billing_account.
     */
    matchBillingAccountFromBillingAccountLocationRecommenderRecommendationName(billingAccountLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the location from BillingAccountLocationRecommenderRecommendation resource.
     *
     * @param {string} billingAccountLocationRecommenderRecommendationName
     *   A fully-qualified path representing billing_account_location_recommender_recommendation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBillingAccountLocationRecommenderRecommendationName(billingAccountLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the recommender from BillingAccountLocationRecommenderRecommendation resource.
     *
     * @param {string} billingAccountLocationRecommenderRecommendationName
     *   A fully-qualified path representing billing_account_location_recommender_recommendation resource.
     * @returns {string} A string representing the recommender.
     */
    matchRecommenderFromBillingAccountLocationRecommenderRecommendationName(billingAccountLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the recommendation from BillingAccountLocationRecommenderRecommendation resource.
     *
     * @param {string} billingAccountLocationRecommenderRecommendationName
     *   A fully-qualified path representing billing_account_location_recommender_recommendation resource.
     * @returns {string} A string representing the recommendation.
     */
    matchRecommendationFromBillingAccountLocationRecommenderRecommendationName(billingAccountLocationRecommenderRecommendationName: string): string | number;
    /**
     * Return a fully-qualified folderLocationInsightType resource name string.
     *
     * @param {string} folder
     * @param {string} location
     * @param {string} insight_type
     * @returns {string} Resource name string.
     */
    folderLocationInsightTypePath(folder: string, location: string, insightType: string): string;
    /**
     * Parse the folder from FolderLocationInsightType resource.
     *
     * @param {string} folderLocationInsightTypeName
     *   A fully-qualified path representing folder_location_insight_type resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderLocationInsightTypeName(folderLocationInsightTypeName: string): string | number;
    /**
     * Parse the location from FolderLocationInsightType resource.
     *
     * @param {string} folderLocationInsightTypeName
     *   A fully-qualified path representing folder_location_insight_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFolderLocationInsightTypeName(folderLocationInsightTypeName: string): string | number;
    /**
     * Parse the insight_type from FolderLocationInsightType resource.
     *
     * @param {string} folderLocationInsightTypeName
     *   A fully-qualified path representing folder_location_insight_type resource.
     * @returns {string} A string representing the insight_type.
     */
    matchInsightTypeFromFolderLocationInsightTypeName(folderLocationInsightTypeName: string): string | number;
    /**
     * Return a fully-qualified folderLocationInsightTypeInsight resource name string.
     *
     * @param {string} folder
     * @param {string} location
     * @param {string} insight_type
     * @param {string} insight
     * @returns {string} Resource name string.
     */
    folderLocationInsightTypeInsightPath(folder: string, location: string, insightType: string, insight: string): string;
    /**
     * Parse the folder from FolderLocationInsightTypeInsight resource.
     *
     * @param {string} folderLocationInsightTypeInsightName
     *   A fully-qualified path representing folder_location_insight_type_insight resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderLocationInsightTypeInsightName(folderLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the location from FolderLocationInsightTypeInsight resource.
     *
     * @param {string} folderLocationInsightTypeInsightName
     *   A fully-qualified path representing folder_location_insight_type_insight resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFolderLocationInsightTypeInsightName(folderLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the insight_type from FolderLocationInsightTypeInsight resource.
     *
     * @param {string} folderLocationInsightTypeInsightName
     *   A fully-qualified path representing folder_location_insight_type_insight resource.
     * @returns {string} A string representing the insight_type.
     */
    matchInsightTypeFromFolderLocationInsightTypeInsightName(folderLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the insight from FolderLocationInsightTypeInsight resource.
     *
     * @param {string} folderLocationInsightTypeInsightName
     *   A fully-qualified path representing folder_location_insight_type_insight resource.
     * @returns {string} A string representing the insight.
     */
    matchInsightFromFolderLocationInsightTypeInsightName(folderLocationInsightTypeInsightName: string): string | number;
    /**
     * Return a fully-qualified folderLocationRecommender resource name string.
     *
     * @param {string} folder
     * @param {string} location
     * @param {string} recommender
     * @returns {string} Resource name string.
     */
    folderLocationRecommenderPath(folder: string, location: string, recommender: string): string;
    /**
     * Parse the folder from FolderLocationRecommender resource.
     *
     * @param {string} folderLocationRecommenderName
     *   A fully-qualified path representing folder_location_recommender resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderLocationRecommenderName(folderLocationRecommenderName: string): string | number;
    /**
     * Parse the location from FolderLocationRecommender resource.
     *
     * @param {string} folderLocationRecommenderName
     *   A fully-qualified path representing folder_location_recommender resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFolderLocationRecommenderName(folderLocationRecommenderName: string): string | number;
    /**
     * Parse the recommender from FolderLocationRecommender resource.
     *
     * @param {string} folderLocationRecommenderName
     *   A fully-qualified path representing folder_location_recommender resource.
     * @returns {string} A string representing the recommender.
     */
    matchRecommenderFromFolderLocationRecommenderName(folderLocationRecommenderName: string): string | number;
    /**
     * Return a fully-qualified folderLocationRecommenderRecommendation resource name string.
     *
     * @param {string} folder
     * @param {string} location
     * @param {string} recommender
     * @param {string} recommendation
     * @returns {string} Resource name string.
     */
    folderLocationRecommenderRecommendationPath(folder: string, location: string, recommender: string, recommendation: string): string;
    /**
     * Parse the folder from FolderLocationRecommenderRecommendation resource.
     *
     * @param {string} folderLocationRecommenderRecommendationName
     *   A fully-qualified path representing folder_location_recommender_recommendation resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderLocationRecommenderRecommendationName(folderLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the location from FolderLocationRecommenderRecommendation resource.
     *
     * @param {string} folderLocationRecommenderRecommendationName
     *   A fully-qualified path representing folder_location_recommender_recommendation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFolderLocationRecommenderRecommendationName(folderLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the recommender from FolderLocationRecommenderRecommendation resource.
     *
     * @param {string} folderLocationRecommenderRecommendationName
     *   A fully-qualified path representing folder_location_recommender_recommendation resource.
     * @returns {string} A string representing the recommender.
     */
    matchRecommenderFromFolderLocationRecommenderRecommendationName(folderLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the recommendation from FolderLocationRecommenderRecommendation resource.
     *
     * @param {string} folderLocationRecommenderRecommendationName
     *   A fully-qualified path representing folder_location_recommender_recommendation resource.
     * @returns {string} A string representing the recommendation.
     */
    matchRecommendationFromFolderLocationRecommenderRecommendationName(folderLocationRecommenderRecommendationName: string): string | number;
    /**
     * Return a fully-qualified organizationLocationInsightType resource name string.
     *
     * @param {string} organization
     * @param {string} location
     * @param {string} insight_type
     * @returns {string} Resource name string.
     */
    organizationLocationInsightTypePath(organization: string, location: string, insightType: string): string;
    /**
     * Parse the organization from OrganizationLocationInsightType resource.
     *
     * @param {string} organizationLocationInsightTypeName
     *   A fully-qualified path representing organization_location_insight_type resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationLocationInsightTypeName(organizationLocationInsightTypeName: string): string | number;
    /**
     * Parse the location from OrganizationLocationInsightType resource.
     *
     * @param {string} organizationLocationInsightTypeName
     *   A fully-qualified path representing organization_location_insight_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromOrganizationLocationInsightTypeName(organizationLocationInsightTypeName: string): string | number;
    /**
     * Parse the insight_type from OrganizationLocationInsightType resource.
     *
     * @param {string} organizationLocationInsightTypeName
     *   A fully-qualified path representing organization_location_insight_type resource.
     * @returns {string} A string representing the insight_type.
     */
    matchInsightTypeFromOrganizationLocationInsightTypeName(organizationLocationInsightTypeName: string): string | number;
    /**
     * Return a fully-qualified organizationLocationInsightTypeInsight resource name string.
     *
     * @param {string} organization
     * @param {string} location
     * @param {string} insight_type
     * @param {string} insight
     * @returns {string} Resource name string.
     */
    organizationLocationInsightTypeInsightPath(organization: string, location: string, insightType: string, insight: string): string;
    /**
     * Parse the organization from OrganizationLocationInsightTypeInsight resource.
     *
     * @param {string} organizationLocationInsightTypeInsightName
     *   A fully-qualified path representing organization_location_insight_type_insight resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationLocationInsightTypeInsightName(organizationLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the location from OrganizationLocationInsightTypeInsight resource.
     *
     * @param {string} organizationLocationInsightTypeInsightName
     *   A fully-qualified path representing organization_location_insight_type_insight resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromOrganizationLocationInsightTypeInsightName(organizationLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the insight_type from OrganizationLocationInsightTypeInsight resource.
     *
     * @param {string} organizationLocationInsightTypeInsightName
     *   A fully-qualified path representing organization_location_insight_type_insight resource.
     * @returns {string} A string representing the insight_type.
     */
    matchInsightTypeFromOrganizationLocationInsightTypeInsightName(organizationLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the insight from OrganizationLocationInsightTypeInsight resource.
     *
     * @param {string} organizationLocationInsightTypeInsightName
     *   A fully-qualified path representing organization_location_insight_type_insight resource.
     * @returns {string} A string representing the insight.
     */
    matchInsightFromOrganizationLocationInsightTypeInsightName(organizationLocationInsightTypeInsightName: string): string | number;
    /**
     * Return a fully-qualified organizationLocationRecommender resource name string.
     *
     * @param {string} organization
     * @param {string} location
     * @param {string} recommender
     * @returns {string} Resource name string.
     */
    organizationLocationRecommenderPath(organization: string, location: string, recommender: string): string;
    /**
     * Parse the organization from OrganizationLocationRecommender resource.
     *
     * @param {string} organizationLocationRecommenderName
     *   A fully-qualified path representing organization_location_recommender resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationLocationRecommenderName(organizationLocationRecommenderName: string): string | number;
    /**
     * Parse the location from OrganizationLocationRecommender resource.
     *
     * @param {string} organizationLocationRecommenderName
     *   A fully-qualified path representing organization_location_recommender resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromOrganizationLocationRecommenderName(organizationLocationRecommenderName: string): string | number;
    /**
     * Parse the recommender from OrganizationLocationRecommender resource.
     *
     * @param {string} organizationLocationRecommenderName
     *   A fully-qualified path representing organization_location_recommender resource.
     * @returns {string} A string representing the recommender.
     */
    matchRecommenderFromOrganizationLocationRecommenderName(organizationLocationRecommenderName: string): string | number;
    /**
     * Return a fully-qualified organizationLocationRecommenderRecommendation resource name string.
     *
     * @param {string} organization
     * @param {string} location
     * @param {string} recommender
     * @param {string} recommendation
     * @returns {string} Resource name string.
     */
    organizationLocationRecommenderRecommendationPath(organization: string, location: string, recommender: string, recommendation: string): string;
    /**
     * Parse the organization from OrganizationLocationRecommenderRecommendation resource.
     *
     * @param {string} organizationLocationRecommenderRecommendationName
     *   A fully-qualified path representing organization_location_recommender_recommendation resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationLocationRecommenderRecommendationName(organizationLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the location from OrganizationLocationRecommenderRecommendation resource.
     *
     * @param {string} organizationLocationRecommenderRecommendationName
     *   A fully-qualified path representing organization_location_recommender_recommendation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromOrganizationLocationRecommenderRecommendationName(organizationLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the recommender from OrganizationLocationRecommenderRecommendation resource.
     *
     * @param {string} organizationLocationRecommenderRecommendationName
     *   A fully-qualified path representing organization_location_recommender_recommendation resource.
     * @returns {string} A string representing the recommender.
     */
    matchRecommenderFromOrganizationLocationRecommenderRecommendationName(organizationLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the recommendation from OrganizationLocationRecommenderRecommendation resource.
     *
     * @param {string} organizationLocationRecommenderRecommendationName
     *   A fully-qualified path representing organization_location_recommender_recommendation resource.
     * @returns {string} A string representing the recommendation.
     */
    matchRecommendationFromOrganizationLocationRecommenderRecommendationName(organizationLocationRecommenderRecommendationName: string): string | number;
    /**
     * Return a fully-qualified projectLocationInsightType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} insight_type
     * @returns {string} Resource name string.
     */
    projectLocationInsightTypePath(project: string, location: string, insightType: string): string;
    /**
     * Parse the project from ProjectLocationInsightType resource.
     *
     * @param {string} projectLocationInsightTypeName
     *   A fully-qualified path representing project_location_insight_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationInsightTypeName(projectLocationInsightTypeName: string): string | number;
    /**
     * Parse the location from ProjectLocationInsightType resource.
     *
     * @param {string} projectLocationInsightTypeName
     *   A fully-qualified path representing project_location_insight_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationInsightTypeName(projectLocationInsightTypeName: string): string | number;
    /**
     * Parse the insight_type from ProjectLocationInsightType resource.
     *
     * @param {string} projectLocationInsightTypeName
     *   A fully-qualified path representing project_location_insight_type resource.
     * @returns {string} A string representing the insight_type.
     */
    matchInsightTypeFromProjectLocationInsightTypeName(projectLocationInsightTypeName: string): string | number;
    /**
     * Return a fully-qualified projectLocationInsightTypeInsight resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} insight_type
     * @param {string} insight
     * @returns {string} Resource name string.
     */
    projectLocationInsightTypeInsightPath(project: string, location: string, insightType: string, insight: string): string;
    /**
     * Parse the project from ProjectLocationInsightTypeInsight resource.
     *
     * @param {string} projectLocationInsightTypeInsightName
     *   A fully-qualified path representing project_location_insight_type_insight resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationInsightTypeInsightName(projectLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the location from ProjectLocationInsightTypeInsight resource.
     *
     * @param {string} projectLocationInsightTypeInsightName
     *   A fully-qualified path representing project_location_insight_type_insight resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationInsightTypeInsightName(projectLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the insight_type from ProjectLocationInsightTypeInsight resource.
     *
     * @param {string} projectLocationInsightTypeInsightName
     *   A fully-qualified path representing project_location_insight_type_insight resource.
     * @returns {string} A string representing the insight_type.
     */
    matchInsightTypeFromProjectLocationInsightTypeInsightName(projectLocationInsightTypeInsightName: string): string | number;
    /**
     * Parse the insight from ProjectLocationInsightTypeInsight resource.
     *
     * @param {string} projectLocationInsightTypeInsightName
     *   A fully-qualified path representing project_location_insight_type_insight resource.
     * @returns {string} A string representing the insight.
     */
    matchInsightFromProjectLocationInsightTypeInsightName(projectLocationInsightTypeInsightName: string): string | number;
    /**
     * Return a fully-qualified projectLocationRecommender resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} recommender
     * @returns {string} Resource name string.
     */
    projectLocationRecommenderPath(project: string, location: string, recommender: string): string;
    /**
     * Parse the project from ProjectLocationRecommender resource.
     *
     * @param {string} projectLocationRecommenderName
     *   A fully-qualified path representing project_location_recommender resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationRecommenderName(projectLocationRecommenderName: string): string | number;
    /**
     * Parse the location from ProjectLocationRecommender resource.
     *
     * @param {string} projectLocationRecommenderName
     *   A fully-qualified path representing project_location_recommender resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationRecommenderName(projectLocationRecommenderName: string): string | number;
    /**
     * Parse the recommender from ProjectLocationRecommender resource.
     *
     * @param {string} projectLocationRecommenderName
     *   A fully-qualified path representing project_location_recommender resource.
     * @returns {string} A string representing the recommender.
     */
    matchRecommenderFromProjectLocationRecommenderName(projectLocationRecommenderName: string): string | number;
    /**
     * Return a fully-qualified projectLocationRecommenderRecommendation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} recommender
     * @param {string} recommendation
     * @returns {string} Resource name string.
     */
    projectLocationRecommenderRecommendationPath(project: string, location: string, recommender: string, recommendation: string): string;
    /**
     * Parse the project from ProjectLocationRecommenderRecommendation resource.
     *
     * @param {string} projectLocationRecommenderRecommendationName
     *   A fully-qualified path representing project_location_recommender_recommendation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationRecommenderRecommendationName(projectLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the location from ProjectLocationRecommenderRecommendation resource.
     *
     * @param {string} projectLocationRecommenderRecommendationName
     *   A fully-qualified path representing project_location_recommender_recommendation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationRecommenderRecommendationName(projectLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the recommender from ProjectLocationRecommenderRecommendation resource.
     *
     * @param {string} projectLocationRecommenderRecommendationName
     *   A fully-qualified path representing project_location_recommender_recommendation resource.
     * @returns {string} A string representing the recommender.
     */
    matchRecommenderFromProjectLocationRecommenderRecommendationName(projectLocationRecommenderRecommendationName: string): string | number;
    /**
     * Parse the recommendation from ProjectLocationRecommenderRecommendation resource.
     *
     * @param {string} projectLocationRecommenderRecommendationName
     *   A fully-qualified path representing project_location_recommender_recommendation resource.
     * @returns {string} A string representing the recommendation.
     */
    matchRecommendationFromProjectLocationRecommenderRecommendationName(projectLocationRecommenderRecommendationName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
