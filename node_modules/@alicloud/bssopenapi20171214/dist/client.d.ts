/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddAccountRelationRequest extends $tea.Model {
    childNick?: string;
    childUserId?: number;
    parentUserId?: number;
    permissionCodes?: string[];
    relationType?: string;
    requestId?: string;
    roleCodes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAccountRelationResponseBody extends $tea.Model {
    code?: string;
    data?: AddAccountRelationResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAccountRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddAccountRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateCostUnitResourceRequest extends $tea.Model {
    fromUnitId?: number;
    fromUnitUserId?: number;
    resourceInstanceList?: AllocateCostUnitResourceRequestResourceInstanceList[];
    toUnitId?: number;
    toUnitUserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateCostUnitResourceResponseBody extends $tea.Model {
    code?: string;
    data?: AllocateCostUnitResourceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateCostUnitResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AllocateCostUnitResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyInvoiceRequest extends $tea.Model {
    addressId?: number;
    applyUserNick?: string;
    customerId?: number;
    invoiceAmount?: number;
    invoiceByAmount?: boolean;
    invoicingType?: number;
    ownerId?: number;
    processWay?: number;
    selectedIds?: number[];
    userRemark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyInvoiceResponseBody extends $tea.Model {
    code?: string;
    data?: ApplyInvoiceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyInvoiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ApplyInvoiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderRequest extends $tea.Model {
    orderId?: string;
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderResponseBody extends $tea.Model {
    code?: string;
    data?: CancelOrderResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CancelOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeResellerConsumeAmountRequest extends $tea.Model {
    adjustType?: string;
    amount?: string;
    businessType?: string;
    currency?: string;
    extendMap?: string;
    outBizId?: string;
    ownerId?: number;
    source?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeResellerConsumeAmountResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeResellerConsumeAmountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ChangeResellerConsumeAmountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmRelationRequest extends $tea.Model {
    childUserId?: number;
    confirmCode?: string;
    parentUserId?: number;
    permissionCodes?: string[];
    relationId?: number;
    relationType?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmRelationResponseBody extends $tea.Model {
    code?: string;
    data?: ConfirmRelationResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ConfirmRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConvertChargeTypeRequest extends $tea.Model {
    instanceId?: string;
    ownerId?: number;
    period?: number;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConvertChargeTypeResponseBody extends $tea.Model {
    code?: string;
    data?: ConvertChargeTypeResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConvertChargeTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ConvertChargeTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAgAccountRequest extends $tea.Model {
    accountAttr?: string;
    cityName?: string;
    enterpriseName?: string;
    firstName?: string;
    lastName?: string;
    loginEmail?: string;
    nationCode?: string;
    postcode?: string;
    provinceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAgAccountResponseBody extends $tea.Model {
    agRelationDto?: CreateAgAccountResponseBodyAgRelationDto;
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAgAccountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateAgAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCostUnitRequest extends $tea.Model {
    unitEntityList?: CreateCostUnitRequestUnitEntityList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCostUnitResponseBody extends $tea.Model {
    code?: string;
    data?: CreateCostUnitResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCostUnitResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateCostUnitResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceRequest extends $tea.Model {
    clientToken?: string;
    logistics?: string;
    ownerId?: number;
    parameter?: CreateInstanceRequestParameter[];
    period?: number;
    productCode?: string;
    productType?: string;
    renewPeriod?: number;
    renewalStatus?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: CreateInstanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResellerUserQuotaRequest extends $tea.Model {
    amount?: string;
    currency?: string;
    outBizId?: string;
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResellerUserQuotaResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResellerUserQuotaResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateResellerUserQuotaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResourcePackageRequest extends $tea.Model {
    duration?: number;
    effectiveDate?: string;
    ownerId?: number;
    packageType?: string;
    pricingCycle?: string;
    productCode?: string;
    specification?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResourcePackageResponseBody extends $tea.Model {
    code?: string;
    data?: CreateResourcePackageResponseBodyData;
    message?: string;
    orderId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResourcePackageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateResourcePackageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSavingsPlansInstanceRequest extends $tea.Model {
    commodityCode?: string;
    duration?: string;
    effectiveDate?: string;
    extendMap?: {
        [key: string]: string;
    };
    payMode?: string;
    poolValue?: string;
    pricingCycle?: string;
    region?: string;
    specType?: string;
    specification?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSavingsPlansInstanceShrinkRequest extends $tea.Model {
    commodityCode?: string;
    duration?: string;
    effectiveDate?: string;
    extendMapShrink?: string;
    payMode?: string;
    poolValue?: string;
    pricingCycle?: string;
    region?: string;
    specType?: string;
    specification?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSavingsPlansInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: CreateSavingsPlansInstanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSavingsPlansInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSavingsPlansInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCostUnitRequest extends $tea.Model {
    ownerUid?: number;
    unitId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCostUnitResponseBody extends $tea.Model {
    code?: string;
    data?: DeleteCostUnitResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCostUnitResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteCostUnitResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCostBudgetsSummaryRequest extends $tea.Model {
    budgetName?: string;
    budgetStatus?: string;
    budgetType?: string;
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCostBudgetsSummaryResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeCostBudgetsSummaryResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCostBudgetsSummaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCostBudgetsSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodRequest extends $tea.Model {
    billOwnerIdList?: string[];
    billUserIdList?: string[];
    billingCycle?: string;
    consumePeriodFilter?: string[];
    costUnitCode?: string;
    instanceIdList?: string[];
    maxResults?: number;
    nextToken?: string;
    productCode?: string;
    productDetail?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest extends $tea.Model {
    amortizationDateEnd?: string;
    amortizationDateStart?: string;
    billOwnerIdList?: string[];
    billUserIdList?: string[];
    billingCycle?: string;
    costUnitCode?: string;
    instanceIdList?: string[];
    maxResults?: number;
    nextToken?: string;
    productCode?: string;
    productDetail?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByConsumePeriodRequest extends $tea.Model {
    amortizationPeriodFilter?: string[];
    billOwnerIdList?: string[];
    billUserIdList?: string[];
    billingCycle?: string;
    costUnitCode?: string;
    instanceIdList?: string[];
    maxResults?: number;
    nextToken?: string;
    productCode?: string;
    productDetail?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByConsumePeriodResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByConsumePeriodResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeInstanceAmortizedCostByConsumePeriodResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceBillRequest extends $tea.Model {
    billOwnerId?: number;
    billingCycle?: string;
    billingDate?: string;
    granularity?: string;
    instanceID?: string;
    isBillingItem?: boolean;
    isHideZeroCharge?: boolean;
    maxResults?: number;
    nextToken?: string;
    ownerId?: number;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceBillResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeInstanceBillResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceBillResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeInstanceBillResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleRequest extends $tea.Model {
    ownerId?: number;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBody extends $tea.Model {
    code?: string;
    data?: DescribePricingModuleResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePricingModuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByAmortizationPeriodRequest extends $tea.Model {
    billOwnerIdList?: string[];
    billUserIdList?: string[];
    billingCycle?: string;
    consumePeriodFilter?: string[];
    costUnitCode?: string;
    maxResults?: number;
    nextToken?: string;
    productCode?: string;
    productDetail?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByAmortizationPeriodResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByAmortizationPeriodResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeProductAmortizedCostByAmortizationPeriodResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByConsumePeriodRequest extends $tea.Model {
    amortizationPeriodFilter?: string[];
    billOwnerIdList?: string[];
    billUserIdList?: string[];
    billingCycle?: string;
    costUnitCode?: string;
    maxResults?: number;
    nextToken?: string;
    productCode?: string;
    productDetail?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByConsumePeriodResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeProductAmortizedCostByConsumePeriodResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByConsumePeriodResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeProductAmortizedCostByConsumePeriodResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageDetailRequest extends $tea.Model {
    billOwnerId?: number;
    endPeriod?: string;
    maxResults?: number;
    nextToken?: string;
    periodType?: string;
    resourceType?: string;
    startPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageDetailResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeResourceCoverageDetailResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeResourceCoverageDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageTotalRequest extends $tea.Model {
    billOwnerId?: number;
    endPeriod?: string;
    periodType?: string;
    resourceType?: string;
    startPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageTotalResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeResourceCoverageTotalResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageTotalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeResourceCoverageTotalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductRequest extends $tea.Model {
    productCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeResourcePackageProductResponseBodyData;
    message?: string;
    orderId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeResourcePackageProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageDetailRequest extends $tea.Model {
    billOwnerId?: number;
    endPeriod?: string;
    maxResults?: number;
    nextToken?: string;
    periodType?: string;
    resourceType?: string;
    startPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageDetailResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeResourceUsageDetailResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeResourceUsageDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageTotalRequest extends $tea.Model {
    billOwnerId?: number;
    endPeriod?: string;
    periodType?: string;
    resourceType?: string;
    startPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageTotalResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeResourceUsageTotalResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageTotalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeResourceUsageTotalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageDetailRequest extends $tea.Model {
    billOwnerId?: number;
    endPeriod?: string;
    maxResults?: number;
    periodType?: string;
    startPeriod?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageDetailResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeSavingsPlansCoverageDetailResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSavingsPlansCoverageDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageTotalRequest extends $tea.Model {
    billOwnerId?: number;
    endPeriod?: string;
    periodType?: string;
    startPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageTotalResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeSavingsPlansCoverageTotalResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageTotalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSavingsPlansCoverageTotalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageDetailRequest extends $tea.Model {
    billOwnerId?: number;
    endPeriod?: string;
    maxResults?: number;
    periodType?: string;
    startPeriod?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageDetailResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeSavingsPlansUsageDetailResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSavingsPlansUsageDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageTotalRequest extends $tea.Model {
    billOwnerId?: number;
    endPeriod?: string;
    periodType?: string;
    startPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageTotalResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeSavingsPlansUsageTotalResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageTotalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSavingsPlansUsageTotalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSplitItemBillRequest extends $tea.Model {
    billOwnerId?: number;
    billingCycle?: string;
    billingDate?: string;
    granularity?: string;
    instanceID?: string;
    maxResults?: number;
    nextToken?: string;
    ownerId?: number;
    productCode?: string;
    productType?: string;
    splitItemID?: string;
    subscriptionType?: string;
    tagFilter?: DescribeSplitItemBillRequestTagFilter[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSplitItemBillResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeSplitItemBillResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSplitItemBillResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSplitItemBillResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableBillGenerationRequest extends $tea.Model {
    ownerId?: number;
    productCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableBillGenerationResponseBody extends $tea.Model {
    code?: string;
    data?: EnableBillGenerationResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableBillGenerationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EnableBillGenerationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountRelationRequest extends $tea.Model {
    relationId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountRelationResponseBody extends $tea.Model {
    code?: string;
    data?: GetAccountRelationResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetAccountRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerAccountInfoRequest extends $tea.Model {
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerAccountInfoResponseBody extends $tea.Model {
    code?: string;
    data?: GetCustomerAccountInfoResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerAccountInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetCustomerAccountInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerListResponseBody extends $tea.Model {
    code?: string;
    data?: GetCustomerListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetCustomerListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrderDetailRequest extends $tea.Model {
    orderId?: string;
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrderDetailResponseBody extends $tea.Model {
    code?: string;
    data?: GetOrderDetailResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrderDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetOrderDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceRequest extends $tea.Model {
    moduleList?: GetPayAsYouGoPriceRequestModuleList[];
    ownerId?: number;
    productCode?: string;
    productType?: string;
    region?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceResponseBody extends $tea.Model {
    code?: string;
    data?: GetPayAsYouGoPriceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPayAsYouGoPriceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourcePackagePriceRequest extends $tea.Model {
    duration?: number;
    effectiveDate?: string;
    instanceId?: string;
    orderType?: string;
    ownerId?: number;
    packageType?: string;
    pricingCycle?: string;
    productCode?: string;
    specification?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourcePackagePriceResponseBody extends $tea.Model {
    code?: string;
    data?: GetResourcePackagePriceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourcePackagePriceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetResourcePackagePriceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceRequest extends $tea.Model {
    instanceId?: string;
    moduleList?: GetSubscriptionPriceRequestModuleList[];
    orderType?: string;
    ownerId?: number;
    productCode?: string;
    productType?: string;
    quantity?: number;
    region?: string;
    servicePeriodQuantity?: number;
    servicePeriodUnit?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceResponseBody extends $tea.Model {
    code?: string;
    data?: GetSubscriptionPriceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSubscriptionPriceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InquiryPriceRefundInstanceRequest extends $tea.Model {
    clientToken?: string;
    instanceId?: string;
    productCode?: string;
    productType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InquiryPriceRefundInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: InquiryPriceRefundInstanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InquiryPriceRefundInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: InquiryPriceRefundInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountRelationRequest extends $tea.Model {
    childNick?: string;
    childUserId?: number;
    parentUserId?: number;
    permissionCodes?: string[];
    relationId?: number;
    relationOperation?: string;
    relationType?: string;
    requestId?: string;
    roleCodes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountRelationResponseBody extends $tea.Model {
    code?: string;
    data?: ModifyAccountRelationResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyAccountRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCostUnitRequest extends $tea.Model {
    unitEntityList?: ModifyCostUnitRequestUnitEntityList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCostUnitResponseBody extends $tea.Model {
    code?: string;
    data?: ModifyCostUnitResponseBodyData[];
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCostUnitResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyCostUnitResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceRequest extends $tea.Model {
    clientToken?: string;
    instanceId?: string;
    modifyType?: string;
    ownerId?: number;
    parameter?: ModifyInstanceRequestParameter[];
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: ModifyInstanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBalanceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryAccountBalanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBalanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAccountBalanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBillRequest extends $tea.Model {
    billOwnerId?: number;
    billingCycle?: string;
    billingDate?: string;
    granularity?: string;
    isGroupByProduct?: boolean;
    ownerID?: number;
    pageNum?: number;
    pageSize?: number;
    productCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBillResponseBody extends $tea.Model {
    code?: string;
    data?: QueryAccountBillResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBillResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAccountBillResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionDetailsRequest extends $tea.Model {
    createTimeEnd?: string;
    createTimeStart?: string;
    maxResults?: number;
    nextToken?: string;
    recordID?: string;
    transactionChannel?: string;
    transactionChannelSN?: string;
    transactionNumber?: string;
    transactionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionDetailsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryAccountTransactionDetailsResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionDetailsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAccountTransactionDetailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionsRequest extends $tea.Model {
    createTimeEnd?: string;
    createTimeStart?: string;
    pageNum?: number;
    pageSize?: number;
    recordID?: string;
    transactionChannel?: string;
    transactionChannelSN?: string;
    transactionFlow?: string;
    transactionNumber?: string;
    transactionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryAccountTransactionsResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAccountTransactionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAvailableInstancesRequest extends $tea.Model {
    createTimeEnd?: string;
    createTimeStart?: string;
    endTimeEnd?: string;
    endTimeStart?: string;
    instanceIDs?: string;
    ownerId?: number;
    pageNum?: number;
    pageSize?: number;
    productCode?: string;
    productType?: string;
    region?: string;
    renewStatus?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAvailableInstancesResponseBody extends $tea.Model {
    code?: string;
    data?: QueryAvailableInstancesResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAvailableInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAvailableInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillRequest extends $tea.Model {
    billOwnerId?: number;
    billingCycle?: string;
    isDisplayLocalCurrency?: boolean;
    isHideZeroCharge?: boolean;
    ownerId?: number;
    pageNum?: number;
    pageSize?: number;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillResponseBody extends $tea.Model {
    code?: string;
    data?: QueryBillResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryBillResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillOverviewRequest extends $tea.Model {
    billOwnerId?: number;
    billingCycle?: string;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillOverviewResponseBody extends $tea.Model {
    code?: string;
    data?: QueryBillOverviewResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillOverviewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryBillOverviewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillToOSSSubscriptionResponseBody extends $tea.Model {
    code?: string;
    data?: QueryBillToOSSSubscriptionResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillToOSSSubscriptionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryBillToOSSSubscriptionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCashCouponsRequest extends $tea.Model {
    effectiveOrNot?: boolean;
    expiryTimeEnd?: string;
    expiryTimeStart?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCashCouponsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryCashCouponsResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCashCouponsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryCashCouponsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCommodityListRequest extends $tea.Model {
    productCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCommodityListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryCommodityListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCommodityListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryCommodityListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitRequest extends $tea.Model {
    ownerUid?: number;
    pageNum?: number;
    pageSize?: number;
    parentUnitId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResponseBody extends $tea.Model {
    code?: string;
    data?: QueryCostUnitResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryCostUnitResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResourceRequest extends $tea.Model {
    ownerUid?: number;
    pageNum?: number;
    pageSize?: number;
    unitId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResourceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryCostUnitResourceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryCostUnitResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerAddressListRequest extends $tea.Model {
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerAddressListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryCustomerAddressListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerAddressListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryCustomerAddressListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDPUtilizationDetailRequest extends $tea.Model {
    commodityCode?: string;
    deductedInstanceId?: string;
    endTime?: string;
    includeShare?: boolean;
    instanceId?: string;
    instanceSpec?: string;
    lastToken?: string;
    limit?: number;
    prodCode?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDPUtilizationDetailResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDPUtilizationDetailResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDPUtilizationDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDPUtilizationDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEvaluateListRequest extends $tea.Model {
    billCycle?: string;
    bizTypeList?: string[];
    endAmount?: number;
    endBizTime?: string;
    endSearchTime?: string;
    outBizId?: string;
    ownerId?: number;
    pageNum?: number;
    pageSize?: number;
    sortType?: number;
    startAmount?: number;
    startBizTime?: string;
    startSearchTime?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEvaluateListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEvaluateListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEvaluateListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEvaluateListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFinancialAccountInfoRequest extends $tea.Model {
    userId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFinancialAccountInfoResponseBody extends $tea.Model {
    code?: string;
    data?: QueryFinancialAccountInfoResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFinancialAccountInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryFinancialAccountInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceBillRequest extends $tea.Model {
    billOwnerId?: number;
    billingCycle?: string;
    billingDate?: string;
    granularity?: string;
    isBillingItem?: boolean;
    isHideZeroCharge?: boolean;
    ownerId?: number;
    pageNum?: number;
    pageSize?: number;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceBillResponseBody extends $tea.Model {
    code?: string;
    data?: QueryInstanceBillResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceBillResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryInstanceBillResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceByTagRequest extends $tea.Model {
    resourceId?: string[];
    resourceType?: string;
    tag?: QueryInstanceByTagRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceByTagResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    nextToken?: string;
    requestId?: string;
    success?: boolean;
    tagResource?: QueryInstanceByTagResponseBodyTagResource[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceByTagResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryInstanceByTagResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceGaapCostRequest extends $tea.Model {
    billingCycle?: string;
    pageNum?: number;
    pageSize?: number;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceGaapCostResponseBody extends $tea.Model {
    code?: string;
    data?: QueryInstanceGaapCostResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceGaapCostResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryInstanceGaapCostResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInvoicingCustomerListRequest extends $tea.Model {
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInvoicingCustomerListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryInvoicingCustomerListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInvoicingCustomerListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryInvoicingCustomerListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrdersRequest extends $tea.Model {
    createTimeEnd?: string;
    createTimeStart?: string;
    orderType?: string;
    ownerId?: number;
    pageNum?: number;
    pageSize?: number;
    paymentStatus?: string;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrdersResponseBody extends $tea.Model {
    code?: string;
    data?: QueryOrdersResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrdersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryOrdersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPermissionListRequest extends $tea.Model {
    relationId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPermissionListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryPermissionListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPermissionListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryPermissionListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPrepaidCardsRequest extends $tea.Model {
    effectiveOrNot?: boolean;
    expiryTimeEnd?: string;
    expiryTimeStart?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPrepaidCardsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryPrepaidCardsResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPrepaidCardsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryPrepaidCardsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPriceEntityListRequest extends $tea.Model {
    commodityCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPriceEntityListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryPriceEntityListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPriceEntityListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryPriceEntityListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListRequest extends $tea.Model {
    pageNum?: number;
    pageSize?: number;
    queryTotalCount?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProductListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryProductListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRIUtilizationDetailRequest extends $tea.Model {
    deductedInstanceId?: string;
    endTime?: string;
    instanceSpec?: string;
    pageNum?: number;
    pageSize?: number;
    RICommodityCode?: string;
    RIInstanceId?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRIUtilizationDetailResponseBody extends $tea.Model {
    code?: string;
    data?: QueryRIUtilizationDetailResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRIUtilizationDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryRIUtilizationDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedeemRequest extends $tea.Model {
    effectiveOrNot?: boolean;
    expiryTimeEnd?: string;
    expiryTimeStart?: string;
    pageNum?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedeemResponseBody extends $tea.Model {
    code?: string;
    data?: QueryRedeemResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedeemResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryRedeemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationListRequest extends $tea.Model {
    pageNum?: number;
    pageSize?: number;
    statusList?: string[];
    userId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryRelationListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryRelationListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResellerAvailableQuotaRequest extends $tea.Model {
    itemCodes?: string;
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResellerAvailableQuotaResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResellerAvailableQuotaResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryResellerAvailableQuotaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResellerUserAlarmThresholdRequest extends $tea.Model {
    alarmType?: string;
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResellerUserAlarmThresholdResponseBody extends $tea.Model {
    code?: string;
    count?: number;
    data?: QueryResellerUserAlarmThresholdResponseBodyData[];
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResellerUserAlarmThresholdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryResellerUserAlarmThresholdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourcePackageInstancesRequest extends $tea.Model {
    expiryTimeEnd?: string;
    expiryTimeStart?: string;
    includePartner?: boolean;
    ownerId?: number;
    pageNum?: number;
    pageSize?: number;
    productCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourcePackageInstancesResponseBody extends $tea.Model {
    code?: string;
    data?: QueryResourcePackageInstancesResponseBodyData;
    message?: string;
    page?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourcePackageInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryResourcePackageInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDeductLogRequest extends $tea.Model {
    endTime?: string;
    instanceId?: string;
    instanceType?: string;
    locale?: string;
    pageNum?: number;
    pageSize?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDeductLogResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySavingsPlansDeductLogResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDeductLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySavingsPlansDeductLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDiscountRequest extends $tea.Model {
    commodityCode?: string;
    cycle?: string;
    locale?: string;
    moduleCode?: string;
    pageNum?: number;
    pageSize?: number;
    payMode?: string;
    region?: string;
    spec?: string;
    spnType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDiscountResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySavingsPlansDiscountResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDiscountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySavingsPlansDiscountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansInstanceRequest extends $tea.Model {
    endTime?: string;
    instanceId?: string;
    locale?: string;
    pageNum?: number;
    pageSize?: number;
    startTime?: string;
    status?: string;
    tag?: QuerySavingsPlansInstanceRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySavingsPlansInstanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySavingsPlansInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySettleBillRequest extends $tea.Model {
    billOwnerId?: number;
    billingCycle?: string;
    isDisplayLocalCurrency?: boolean;
    isHideZeroCharge?: boolean;
    maxResults?: number;
    nextToken?: string;
    ownerId?: number;
    productCode?: string;
    productType?: string;
    recordID?: string;
    subscriptionType?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySettleBillResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySettleBillResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySettleBillResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySettleBillResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListRequest extends $tea.Model {
    commodityCode?: string;
    nextPageToken?: string;
    pageSize?: number;
    priceEntityCode?: string;
    priceFactorConditionMap?: {
        [key: string]: string[];
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListShrinkRequest extends $tea.Model {
    commodityCode?: string;
    nextPageToken?: string;
    pageSize?: number;
    priceEntityCode?: string;
    priceFactorConditionMapShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySkuPriceListResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySkuPriceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySplitItemBillRequest extends $tea.Model {
    billOwnerId?: number;
    billingCycle?: string;
    ownerId?: number;
    pageNum?: number;
    pageSize?: number;
    productCode?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySplitItemBillResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySplitItemBillResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySplitItemBillResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySplitItemBillResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserOmsDataRequest extends $tea.Model {
    dataType?: string;
    endTime?: string;
    marker?: string;
    ownerId?: number;
    pageSize?: number;
    startTime?: string;
    table?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserOmsDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryUserOmsDataResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserOmsDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryUserOmsDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefundInstanceRequest extends $tea.Model {
    clientToken?: string;
    immediatelyRelease?: string;
    instanceId?: string;
    productCode?: string;
    productType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefundInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: RefundInstanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefundInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RefundInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstanceRequest extends $tea.Model {
    instanceIds?: string;
    ownerId?: number;
    productCode?: string;
    productType?: string;
    region?: string;
    renewStatus?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: ReleaseInstanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReleaseInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelieveAccountRelationRequest extends $tea.Model {
    childUserId?: number;
    parentUserId?: number;
    relationId?: number;
    relationType?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelieveAccountRelationResponseBody extends $tea.Model {
    code?: string;
    data?: RelieveAccountRelationResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelieveAccountRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RelieveAccountRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceRequest extends $tea.Model {
    clientToken?: string;
    instanceId?: string;
    ownerId?: number;
    productCode?: string;
    productType?: string;
    renewPeriod?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: RenewInstanceResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RenewInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewResourcePackageRequest extends $tea.Model {
    duration?: number;
    effectiveDate?: string;
    instanceId?: string;
    ownerId?: number;
    pricingCycle?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewResourcePackageResponseBody extends $tea.Model {
    code?: string;
    data?: RenewResourcePackageResponseBodyData;
    message?: string;
    orderId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewResourcePackageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RenewResourcePackageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserCreditRequest extends $tea.Model {
    avoidExpiration?: boolean;
    avoidNotification?: boolean;
    avoidPrepaidExpiration?: boolean;
    avoidPrepaidNotification?: boolean;
    creditType?: string;
    creditValue?: string;
    description?: string;
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserCreditResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserCreditResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveUserCreditResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetAllExpirationDayRequest extends $tea.Model {
    ownerId?: number;
    unifyExpireDay?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetAllExpirationDayResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetAllExpirationDayResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetAllExpirationDayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetCreditLabelActionRequest extends $tea.Model {
    actionType?: string;
    clearCycle?: string;
    creditAmount?: string;
    currencyCode?: string;
    dailyCycle?: string;
    description?: string;
    isNeedAddSettleLabel?: string;
    isNeedAdjustCreditAccount?: string;
    isNeedSaveNotifyRule?: string;
    isNeedSetCreditAmount?: string;
    needNotice?: boolean;
    newCreateMode?: boolean;
    operator?: string;
    requestId?: string;
    siteCode?: string;
    source?: string;
    uid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetCreditLabelActionResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetCreditLabelActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetCreditLabelActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRenewalRequest extends $tea.Model {
    instanceIDs?: string;
    ownerId?: number;
    productCode?: string;
    productType?: string;
    renewalPeriod?: number;
    renewalPeriodUnit?: string;
    renewalStatus?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRenewalResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRenewalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetRenewalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserAlarmThresholdRequest extends $tea.Model {
    alarmThresholds?: string;
    alarmType?: string;
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserAlarmThresholdResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserAlarmThresholdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetResellerUserAlarmThresholdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserQuotaRequest extends $tea.Model {
    amount?: string;
    currency?: string;
    outBizId?: string;
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserQuotaResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserQuotaResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetResellerUserQuotaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserStatusRequest extends $tea.Model {
    businessType?: string;
    ownerId?: string;
    status?: string;
    stopMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserStatusResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetResellerUserStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetResellerUserStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeBillToOSSRequest extends $tea.Model {
    beginBillingCycle?: string;
    bucketOwnerId?: number;
    bucketPath?: string;
    multAccountRelSubscribe?: string;
    rowLimitPerFile?: number;
    subscribeBucket?: string;
    subscribeType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeBillToOSSResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeBillToOSSResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SubscribeBillToOSSResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequest extends $tea.Model {
    resourceId?: string[];
    resourceType?: string;
    tag?: TagResourcesRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeBillToOSSRequest extends $tea.Model {
    multAccountRelSubscribe?: string;
    subscribeType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeBillToOSSResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeBillToOSSResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnsubscribeBillToOSSResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesRequest extends $tea.Model {
    all?: boolean;
    resourceId?: string[];
    resourceType?: string;
    tagKey?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UntagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeResourcePackageRequest extends $tea.Model {
    effectiveDate?: string;
    instanceId?: string;
    ownerId?: number;
    specification?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeResourcePackageResponseBody extends $tea.Model {
    code?: string;
    data?: UpgradeResourcePackageResponseBodyData;
    message?: string;
    orderId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeResourcePackageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpgradeResourcePackageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAccountRelationResponseBodyData extends $tea.Model {
    hostId?: string;
    relationId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateCostUnitResourceRequestResourceInstanceList extends $tea.Model {
    apportionCode?: string;
    commodityCode?: string;
    resourceId?: string;
    resourceUserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateCostUnitResourceResponseBodyData extends $tea.Model {
    isSuccess?: boolean;
    toUnitId?: number;
    toUnitUserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyInvoiceResponseBodyData extends $tea.Model {
    invoiceApplyId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderResponseBodyData extends $tea.Model {
    hostId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmRelationResponseBodyData extends $tea.Model {
    hostId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConvertChargeTypeResponseBodyData extends $tea.Model {
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAgAccountResponseBodyAgRelationDto extends $tea.Model {
    mpk?: string;
    pk?: string;
    ramAdminRoleName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCostUnitRequestUnitEntityList extends $tea.Model {
    ownerUid?: number;
    parentUnitId?: number;
    unitName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCostUnitResponseBodyDataCostUnitDtoList extends $tea.Model {
    ownerUid?: number;
    parentUnitId?: number;
    unitId?: number;
    unitName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCostUnitResponseBodyData extends $tea.Model {
    costUnitDtoList?: CreateCostUnitResponseBodyDataCostUnitDtoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceRequestParameter extends $tea.Model {
    code?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceResponseBodyData extends $tea.Model {
    instanceId?: string;
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResourcePackageResponseBodyData extends $tea.Model {
    instanceId?: string;
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSavingsPlansInstanceResponseBodyData extends $tea.Model {
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCostUnitResponseBodyData extends $tea.Model {
    isSuccess?: boolean;
    ownerUid?: number;
    unitId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCostBudgetsSummaryResponseBodyDataItems extends $tea.Model {
    budget?: {
        [key: string]: any;
    };
    budgetName?: string;
    budgetStatus?: string;
    budgetType?: string;
    calculatedValues?: {
        [key: string]: any;
    };
    consumePeriod?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCostBudgetsSummaryResponseBodyData extends $tea.Model {
    hostId?: string;
    items?: DescribeCostBudgetsSummaryResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems extends $tea.Model {
    amortizationPeriod?: string;
    amortizationStatus?: string;
    billAccountID?: number;
    billAccountName?: string;
    billOwnerID?: number;
    billOwnerName?: string;
    bizType?: string;
    consumePeriod?: string;
    costUnit?: string;
    costUnitCode?: string;
    currentAmortizationDeductedByCashCoupons?: number;
    currentAmortizationDeductedByCoupons?: number;
    currentAmortizationDeductedByPrepaidCard?: number;
    currentAmortizationExpenditureAmount?: number;
    currentAmortizationInvoiceDiscount?: number;
    currentAmortizationPretaxAmount?: number;
    currentAmortizationPretaxGrossAmount?: number;
    currentAmortizationRoundDownDiscount?: number;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    expenditureAmount?: number;
    instanceID?: string;
    internetIP?: string;
    intranetIP?: string;
    invoiceDiscount?: number;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    previouslyAmortizedDeductedByCashCoupons?: number;
    previouslyAmortizedDeductedByCoupons?: number;
    previouslyAmortizedDeductedByPrepaidCard?: number;
    previouslyAmortizedExpenditureAmount?: number;
    previouslyAmortizedInvoiceDiscount?: number;
    previouslyAmortizedPretaxAmount?: number;
    previouslyAmortizedPretaxGrossAmount?: number;
    previouslyAmortizedRoundDownDiscount?: number;
    productCode?: string;
    productDetail?: string;
    productDetailCode?: string;
    productName?: string;
    region?: string;
    remainingAmortizationDeductedByCashCoupons?: number;
    remainingAmortizationDeductedByCoupons?: number;
    remainingAmortizationDeductedByPrepaidCard?: number;
    remainingAmortizationExpenditureAmount?: number;
    remainingAmortizationInvoiceDiscount?: number;
    remainingAmortizationPretaxAmount?: number;
    remainingAmortizationPretaxGrossAmount?: number;
    remainingAmortizationRoundDownDiscount?: number;
    resourceGroup?: string;
    roundDownDiscount?: number;
    splitAccountName?: string;
    splitItemID?: string;
    splitItemName?: string;
    splitProductDetail?: string;
    subscriptionType?: string;
    tag?: string;
    zone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    items?: DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems extends $tea.Model {
    amortizationPeriod?: string;
    amortizationPeriodDay?: string;
    amortizationStatus?: string;
    billAccountID?: number;
    billAccountName?: string;
    billOwnerID?: number;
    billOwnerName?: string;
    bizType?: string;
    consumePeriod?: string;
    consumePeriodDay?: string;
    costUnit?: string;
    costUnitCode?: string;
    currentAmortizationDeductedByCashCoupons?: number;
    currentAmortizationDeductedByCoupons?: number;
    currentAmortizationDeductedByPrepaidCard?: number;
    currentAmortizationExpenditureAmount?: number;
    currentAmortizationInvoiceDiscount?: number;
    currentAmortizationPretaxAmount?: number;
    currentAmortizationPretaxGrossAmount?: number;
    currentAmortizationRoundDownDiscount?: number;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    expenditureAmount?: number;
    instanceID?: string;
    internetIP?: string;
    intranetIP?: string;
    invoiceDiscount?: number;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    previouslyAmortizedDeductedByCashCoupons?: number;
    previouslyAmortizedDeductedByCoupons?: number;
    previouslyAmortizedDeductedByPrepaidCard?: number;
    previouslyAmortizedExpenditureAmount?: number;
    previouslyAmortizedInvoiceDiscount?: number;
    previouslyAmortizedPretaxAmount?: number;
    previouslyAmortizedPretaxGrossAmount?: number;
    previouslyAmortizedRoundDownDiscount?: number;
    productCode?: string;
    productDetail?: string;
    productDetailCode?: string;
    productName?: string;
    region?: string;
    remainingAmortizationDeductedByCashCoupons?: number;
    remainingAmortizationDeductedByCoupons?: number;
    remainingAmortizationDeductedByPrepaidCard?: number;
    remainingAmortizationExpenditureAmount?: number;
    remainingAmortizationInvoiceDiscount?: number;
    remainingAmortizationPretaxAmount?: number;
    remainingAmortizationPretaxGrossAmount?: number;
    remainingAmortizationRoundDownDiscount?: number;
    resourceGroup?: string;
    roundDownDiscount?: number;
    splitAccountName?: string;
    splitItemID?: string;
    splitItemName?: string;
    splitProductDetail?: string;
    subscriptionType?: string;
    tag?: string;
    zone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    hostId?: string;
    items?: DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems extends $tea.Model {
    amortizationPeriod?: string;
    amortizationStatus?: string;
    billAccountID?: number;
    billAccountName?: string;
    billOwnerID?: number;
    billOwnerName?: string;
    bizType?: string;
    consumePeriod?: string;
    costUnit?: string;
    costUnitCode?: string;
    currentAmortizationDeductedByCashCoupons?: number;
    currentAmortizationDeductedByCoupons?: number;
    currentAmortizationDeductedByPrepaidCard?: number;
    currentAmortizationExpenditureAmount?: number;
    currentAmortizationInvoiceDiscount?: number;
    currentAmortizationPretaxAmount?: number;
    currentAmortizationPretaxGrossAmount?: number;
    currentAmortizationRoundDownDiscount?: number;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    expenditureAmount?: number;
    instanceID?: string;
    internetIP?: string;
    intranetIP?: string;
    invoiceDiscount?: number;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    previouslyAmortizedDeductedByCashCoupons?: number;
    previouslyAmortizedDeductedByCoupons?: number;
    previouslyAmortizedDeductedByPrepaidCard?: number;
    previouslyAmortizedExpenditureAmount?: number;
    previouslyAmortizedInvoiceDiscount?: number;
    previouslyAmortizedPretaxAmount?: number;
    previouslyAmortizedPretaxGrossAmount?: number;
    previouslyAmortizedRoundDownDiscount?: number;
    productCode?: string;
    productDetail?: string;
    productDetailCode?: string;
    productName?: string;
    region?: string;
    remainingAmortizationDeductedByCashCoupons?: number;
    remainingAmortizationDeductedByCoupons?: number;
    remainingAmortizationDeductedByPrepaidCard?: number;
    remainingAmortizationExpenditureAmount?: number;
    remainingAmortizationInvoiceDiscount?: number;
    remainingAmortizationPretaxAmount?: number;
    remainingAmortizationPretaxGrossAmount?: number;
    remainingAmortizationRoundDownDiscount?: number;
    resourceGroup?: string;
    roundDownDiscount?: number;
    splitAccountName?: string;
    splitItemID?: string;
    splitItemName?: string;
    splitProductDetail?: string;
    subscriptionType?: string;
    tag?: string;
    zone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    items?: DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceBillResponseBodyDataItems extends $tea.Model {
    adjustAmount?: number;
    billAccountID?: string;
    billAccountName?: string;
    billingDate?: string;
    billingItem?: string;
    billingItemCode?: string;
    billingType?: string;
    bizType?: string;
    cashAmount?: number;
    commodityCode?: string;
    costUnit?: string;
    currency?: string;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    deductedByResourcePackage?: string;
    instanceConfig?: string;
    instanceID?: string;
    instanceSpec?: string;
    internetIP?: string;
    intranetIP?: string;
    invoiceDiscount?: number;
    item?: string;
    itemName?: string;
    listPrice?: string;
    listPriceUnit?: string;
    nickName?: string;
    outstandingAmount?: number;
    ownerID?: string;
    paymentAmount?: number;
    pipCode?: string;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    productCode?: string;
    productDetail?: string;
    productName?: string;
    productType?: string;
    region?: string;
    resourceGroup?: string;
    servicePeriod?: string;
    servicePeriodUnit?: string;
    subscriptionType?: string;
    tag?: string;
    usage?: string;
    usageUnit?: string;
    zone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceBillResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    billingCycle?: string;
    items?: DescribeInstanceBillResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue extends $tea.Model {
    name?: string;
    remark?: string;
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBodyDataAttributeListAttributeValues extends $tea.Model {
    attributeValue?: DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBodyDataAttributeListAttribute extends $tea.Model {
    code?: string;
    name?: string;
    unit?: string;
    values?: DescribePricingModuleResponseBodyDataAttributeListAttributeValues;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBodyDataAttributeList extends $tea.Model {
    attribute?: DescribePricingModuleResponseBodyDataAttributeListAttribute[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBodyDataModuleListModuleConfigList extends $tea.Model {
    configList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBodyDataModuleListModule extends $tea.Model {
    configList?: DescribePricingModuleResponseBodyDataModuleListModuleConfigList;
    currency?: string;
    moduleCode?: string;
    moduleName?: string;
    priceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBodyDataModuleList extends $tea.Model {
    module?: DescribePricingModuleResponseBodyDataModuleListModule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePricingModuleResponseBodyData extends $tea.Model {
    attributeList?: DescribePricingModuleResponseBodyDataAttributeList;
    moduleList?: DescribePricingModuleResponseBodyDataModuleList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems extends $tea.Model {
    amortizationPeriod?: string;
    amortizationStatus?: string;
    billAccountID?: number;
    billAccountName?: string;
    billOwnerID?: number;
    billOwnerName?: string;
    bizType?: string;
    consumePeriod?: string;
    currentAmortizationDeductedByCashCoupons?: number;
    currentAmortizationDeductedByCoupons?: number;
    currentAmortizationDeductedByPrepaidCard?: number;
    currentAmortizationExpenditureAmount?: number;
    currentAmortizationInvoiceDiscount?: number;
    currentAmortizationPretaxAmount?: number;
    currentAmortizationPretaxGrossAmount?: number;
    currentAmortizationRoundDownDiscount?: number;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    expenditureAmount?: number;
    invoiceDiscount?: number;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    previouslyAmortizedDeductedByCashCoupons?: number;
    previouslyAmortizedDeductedByCoupons?: number;
    previouslyAmortizedDeductedByPrepaidCard?: number;
    previouslyAmortizedExpenditureAmount?: number;
    previouslyAmortizedInvoiceDiscount?: number;
    previouslyAmortizedPretaxAmount?: number;
    previouslyAmortizedPretaxGrossAmount?: number;
    previouslyAmortizedRoundDownDiscount?: number;
    productCode?: string;
    productDetail?: string;
    productDetailCode?: string;
    productName?: string;
    remainingAmortizationDeductedByCashCoupons?: number;
    remainingAmortizationDeductedByCoupons?: number;
    remainingAmortizationDeductedByPrepaidCard?: number;
    remainingAmortizationExpenditureAmount?: number;
    remainingAmortizationInvoiceDiscount?: number;
    remainingAmortizationPretaxAmount?: number;
    remainingAmortizationPretaxGrossAmount?: number;
    remainingAmortizationRoundDownDiscount?: number;
    roundDownDiscount?: number;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    items?: DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems extends $tea.Model {
    amortizationPeriod?: string;
    amortizationStatus?: string;
    billAccountID?: number;
    billAccountName?: string;
    billOwnerID?: number;
    billOwnerName?: string;
    bizType?: string;
    consumePeriod?: string;
    currentAmortizationDeductedByCashCoupons?: number;
    currentAmortizationDeductedByCoupons?: number;
    currentAmortizationDeductedByPrepaidCard?: number;
    currentAmortizationExpenditureAmount?: number;
    currentAmortizationInvoiceDiscount?: number;
    currentAmortizationPretaxAmount?: number;
    currentAmortizationPretaxGrossAmount?: number;
    currentAmortizationRoundDownDiscount?: number;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    expenditureAmount?: number;
    invoiceDiscount?: number;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    previouslyAmortizedDeductedByCashCoupons?: number;
    previouslyAmortizedDeductedByCoupons?: number;
    previouslyAmortizedDeductedByPrepaidCard?: number;
    previouslyAmortizedExpenditureAmount?: number;
    previouslyAmortizedInvoiceDiscount?: number;
    previouslyAmortizedPretaxAmount?: number;
    previouslyAmortizedPretaxGrossAmount?: number;
    previouslyAmortizedRoundDownDiscount?: number;
    productCode?: string;
    productDetail?: string;
    productDetailCode?: string;
    productName?: string;
    remainingAmortizationDeductedByCashCoupons?: number;
    remainingAmortizationDeductedByCoupons?: number;
    remainingAmortizationDeductedByPrepaidCard?: number;
    remainingAmortizationExpenditureAmount?: number;
    remainingAmortizationInvoiceDiscount?: number;
    remainingAmortizationPretaxAmount?: number;
    remainingAmortizationPretaxGrossAmount?: number;
    remainingAmortizationRoundDownDiscount?: number;
    roundDownDiscount?: number;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeProductAmortizedCostByConsumePeriodResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    items?: DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageDetailResponseBodyDataItems extends $tea.Model {
    capacityUnit?: string;
    commodityCode?: string;
    commodityName?: string;
    coveragePercentage?: number;
    currency?: string;
    deductQuantity?: number;
    endTime?: string;
    instanceId?: string;
    instanceSpec?: string;
    paymentAmount?: number;
    productCode?: string;
    productName?: string;
    region?: string;
    regionNo?: string;
    startTime?: string;
    totalQuantity?: number;
    userId?: string;
    userName?: string;
    zone?: string;
    zoneName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageDetailResponseBodyData extends $tea.Model {
    items?: DescribeResourceCoverageDetailResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage extends $tea.Model {
    coveragePercentage?: number;
    period?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageTotalResponseBodyDataTotalCoverage extends $tea.Model {
    capacityUnit?: string;
    coveragePercentage?: number;
    deductQuantity?: number;
    totalQuantity?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceCoverageTotalResponseBodyData extends $tea.Model {
    periodCoverage?: DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage[];
    totalCoverage?: DescribeResourceCoverageTotalResponseBodyDataTotalCoverage;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties extends $tea.Model {
    property?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration extends $tea.Model {
    name?: string;
    unit?: string;
    value?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations extends $tea.Model {
    availableDuration?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification extends $tea.Model {
    availableDurations?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications extends $tea.Model {
    specification?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType extends $tea.Model {
    code?: string;
    name?: string;
    properties?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties;
    specifications?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes extends $tea.Model {
    packageType?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage extends $tea.Model {
    name?: string;
    packageTypes?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes;
    productCode?: string;
    productType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyDataResourcePackages extends $tea.Model {
    resourcePackage?: DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourcePackageProductResponseBodyData extends $tea.Model {
    resourcePackages?: DescribeResourcePackageProductResponseBodyDataResourcePackages;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageDetailResponseBodyDataItems extends $tea.Model {
    capacityUnit?: string;
    currency?: string;
    deductQuantity?: number;
    endTime?: string;
    imageType?: string;
    instanceSpec?: string;
    postpaidCost?: string;
    potentialSavedCost?: string;
    quantity?: number;
    region?: string;
    regionNo?: string;
    reservationCost?: string;
    resourceInstanceId?: string;
    savedCost?: string;
    startTime?: string;
    status?: string;
    statusName?: string;
    totalQuantity?: number;
    usagePercentage?: number;
    userId?: string;
    userName?: string;
    zone?: string;
    zoneName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageDetailResponseBodyData extends $tea.Model {
    items?: DescribeResourceUsageDetailResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageTotalResponseBodyDataPeriodCoverage extends $tea.Model {
    period?: string;
    usagePercentage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageTotalResponseBodyDataTotalUsage extends $tea.Model {
    postpaidCost?: number;
    potentialSavedCost?: number;
    reservationCost?: number;
    savedCost?: number;
    usagePercentage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageTotalResponseBodyData extends $tea.Model {
    periodCoverage?: DescribeResourceUsageTotalResponseBodyDataPeriodCoverage[];
    totalUsage?: DescribeResourceUsageTotalResponseBodyDataTotalUsage;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageDetailResponseBodyDataItems extends $tea.Model {
    coveragePercentage?: number;
    currency?: string;
    deductAmount?: number;
    endPeriod?: string;
    instanceId?: string;
    instanceSpec?: string;
    postpaidCost?: number;
    region?: string;
    startPeriod?: string;
    totalAmount?: number;
    userId?: number;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageDetailResponseBodyData extends $tea.Model {
    items?: DescribeSavingsPlansCoverageDetailResponseBodyDataItems[];
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage extends $tea.Model {
    percentage?: number;
    period?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage extends $tea.Model {
    coveragePercentage?: number;
    deductAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansCoverageTotalResponseBodyData extends $tea.Model {
    periodCoverage?: DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage[];
    totalCoverage?: DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageDetailResponseBodyDataItems extends $tea.Model {
    currency?: string;
    deductValue?: number;
    endPeriod?: string;
    instanceId?: string;
    poolValue?: number;
    postpaidCost?: number;
    savedCost?: number;
    startPeriod?: string;
    status?: string;
    type?: string;
    usagePercentage?: number;
    userId?: number;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageDetailResponseBodyData extends $tea.Model {
    items?: DescribeSavingsPlansUsageDetailResponseBodyDataItems[];
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage extends $tea.Model {
    percentage?: number;
    period?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage extends $tea.Model {
    poolValue?: number;
    postpaidCost?: number;
    savedCost?: number;
    usagePercentage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSavingsPlansUsageTotalResponseBodyData extends $tea.Model {
    periodCoverage?: DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage[];
    totalUsage?: DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSplitItemBillRequestTagFilter extends $tea.Model {
    tagKey?: string;
    tagValues?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSplitItemBillResponseBodyDataItems extends $tea.Model {
    adjustAmount?: number;
    billAccountID?: string;
    billAccountName?: string;
    billingDate?: string;
    billingItem?: string;
    billingItemCode?: string;
    billingType?: string;
    bizType?: string;
    cashAmount?: number;
    commodityCode?: string;
    costUnit?: string;
    currency?: string;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    deductedByResourcePackage?: string;
    instanceConfig?: string;
    instanceID?: string;
    instanceSpec?: string;
    internetIP?: string;
    intranetIP?: string;
    invoiceDiscount?: number;
    item?: string;
    itemName?: string;
    listPrice?: string;
    listPriceUnit?: string;
    nickName?: string;
    outstandingAmount?: number;
    ownerID?: string;
    paymentAmount?: number;
    pipCode?: string;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    productCode?: string;
    productDetail?: string;
    productName?: string;
    productType?: string;
    region?: string;
    resourceGroup?: string;
    servicePeriod?: string;
    servicePeriodUnit?: string;
    splitAccountID?: string;
    splitAccountName?: string;
    splitBillingCycle?: string;
    splitBillingDate?: string;
    splitCommodityCode?: string;
    splitItemID?: string;
    splitItemName?: string;
    splitProductDetail?: string;
    subscriptionType?: string;
    tag?: string;
    usage?: string;
    usageUnit?: string;
    zone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSplitItemBillResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    billingCycle?: string;
    items?: DescribeSplitItemBillResponseBodyDataItems[];
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableBillGenerationResponseBodyData extends $tea.Model {
    boolean?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountRelationResponseBodyData extends $tea.Model {
    childUserId?: number;
    endTime?: number;
    gmtModified?: number;
    id?: number;
    parentUserId?: number;
    startTime?: number;
    status?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerAccountInfoResponseBodyData extends $tea.Model {
    accountType?: string;
    creditLimitStatus?: string;
    hostingStatus?: string;
    isCertified?: boolean;
    loginEmail?: string;
    mpk?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerListResponseBodyData extends $tea.Model {
    uidList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrderDetailResponseBodyDataOrderListOrder extends $tea.Model {
    afterTaxAmount?: string;
    commodityCode?: string;
    config?: string;
    createTime?: string;
    currency?: string;
    instanceIDs?: string;
    operator?: string;
    orderId?: string;
    orderSubType?: string;
    orderType?: string;
    originalConfig?: string;
    paymentCurrency?: string;
    paymentStatus?: string;
    paymentTime?: string;
    pretaxAmount?: string;
    pretaxAmountLocal?: string;
    pretaxGrossAmount?: string;
    productCode?: string;
    productType?: string;
    quantity?: string;
    region?: string;
    relatedOrderId?: string;
    subOrderId?: string;
    subscriptionType?: string;
    tax?: string;
    usageEndTime?: string;
    usageStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrderDetailResponseBodyDataOrderList extends $tea.Model {
    order?: GetOrderDetailResponseBodyDataOrderListOrder[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrderDetailResponseBodyData extends $tea.Model {
    hostName?: string;
    orderList?: GetOrderDetailResponseBodyDataOrderList;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceRequestModuleList extends $tea.Model {
    config?: string;
    moduleCode?: string;
    priceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail extends $tea.Model {
    costAfterDiscount?: number;
    invoiceDiscount?: number;
    moduleCode?: string;
    originalCost?: number;
    unitPrice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceResponseBodyDataModuleDetails extends $tea.Model {
    moduleDetail?: GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail extends $tea.Model {
    promotionDesc?: string;
    promotionId?: number;
    promotionName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceResponseBodyDataPromotionDetails extends $tea.Model {
    promotionDetail?: GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPayAsYouGoPriceResponseBodyData extends $tea.Model {
    currency?: string;
    moduleDetails?: GetPayAsYouGoPriceResponseBodyDataModuleDetails;
    promotionDetails?: GetPayAsYouGoPriceResponseBodyDataPromotionDetails;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourcePackagePriceResponseBodyDataPromotionsPromotion extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourcePackagePriceResponseBodyDataPromotions extends $tea.Model {
    promotion?: GetResourcePackagePriceResponseBodyDataPromotionsPromotion[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourcePackagePriceResponseBodyData extends $tea.Model {
    currency?: string;
    discountPrice?: number;
    originalPrice?: number;
    promotions?: GetResourcePackagePriceResponseBodyDataPromotions;
    tradePrice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceRequestModuleList extends $tea.Model {
    config?: string;
    moduleCode?: string;
    moduleStatus?: number;
    tag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail extends $tea.Model {
    costAfterDiscount?: number;
    invoiceDiscount?: number;
    moduleCode?: string;
    originalCost?: number;
    unitPrice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceResponseBodyDataModuleDetails extends $tea.Model {
    moduleDetail?: GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail extends $tea.Model {
    promotionDesc?: string;
    promotionId?: number;
    promotionName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceResponseBodyDataPromotionDetails extends $tea.Model {
    promotionDetail?: GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSubscriptionPriceResponseBodyData extends $tea.Model {
    currency?: string;
    discountPrice?: number;
    moduleDetails?: GetSubscriptionPriceResponseBodyDataModuleDetails;
    originalPrice?: number;
    promotionDetails?: GetSubscriptionPriceResponseBodyDataPromotionDetails;
    quantity?: number;
    tradePrice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InquiryPriceRefundInstanceResponseBodyData extends $tea.Model {
    currency?: string;
    hostId?: string;
    instanceId?: string;
    refundAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountRelationResponseBodyData extends $tea.Model {
    hostId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCostUnitRequestUnitEntityList extends $tea.Model {
    newUnitName?: string;
    ownerUid?: number;
    unitId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCostUnitResponseBodyData extends $tea.Model {
    isSuccess?: boolean;
    ownerUid?: number;
    unitId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceRequestParameter extends $tea.Model {
    code?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceResponseBodyData extends $tea.Model {
    hostId?: string;
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBalanceResponseBodyData extends $tea.Model {
    availableAmount?: string;
    availableCashAmount?: string;
    creditAmount?: string;
    currency?: string;
    mybankCreditAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBillResponseBodyDataItemsItem extends $tea.Model {
    adjustAmount?: number;
    billAccountID?: string;
    billAccountName?: string;
    billingDate?: string;
    bizType?: string;
    cashAmount?: number;
    costUnit?: string;
    currency?: string;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    invoiceDiscount?: number;
    outstandingAmount?: number;
    ownerID?: string;
    ownerName?: string;
    paymentAmount?: number;
    pipCode?: string;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    productCode?: string;
    productName?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBillResponseBodyDataItems extends $tea.Model {
    item?: QueryAccountBillResponseBodyDataItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountBillResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    billingCycle?: string;
    items?: QueryAccountBillResponseBodyDataItems;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList extends $tea.Model {
    amount?: string;
    balance?: string;
    billingCycle?: string;
    fundType?: string;
    recordID?: string;
    remarks?: string;
    transactionAccount?: string;
    transactionChannel?: string;
    transactionChannelSN?: string;
    transactionFlow?: string;
    transactionNumber?: string;
    transactionTime?: string;
    transactionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList extends $tea.Model {
    accountTransactionsList?: QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionDetailsResponseBodyData extends $tea.Model {
    accountName?: string;
    accountTransactionsList?: QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList;
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList extends $tea.Model {
    amount?: string;
    balance?: string;
    billingCycle?: string;
    fundType?: string;
    recordID?: string;
    remarks?: string;
    transactionAccount?: string;
    transactionChannel?: string;
    transactionChannelSN?: string;
    transactionFlow?: string;
    transactionNumber?: string;
    transactionTime?: string;
    transactionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionsResponseBodyDataAccountTransactionsList extends $tea.Model {
    accountTransactionsList?: QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAccountTransactionsResponseBodyData extends $tea.Model {
    accountName?: string;
    accountTransactionsList?: QueryAccountTransactionsResponseBodyDataAccountTransactionsList;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAvailableInstancesResponseBodyDataInstanceList extends $tea.Model {
    createTime?: string;
    endTime?: string;
    expectedReleaseTime?: string;
    instanceID?: string;
    ownerId?: number;
    productCode?: string;
    productType?: string;
    region?: string;
    releaseTime?: string;
    renewStatus?: string;
    renewalDuration?: number;
    renewalDurationUnit?: string;
    seller?: string;
    sellerId?: number;
    status?: string;
    stopTime?: string;
    subStatus?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAvailableInstancesResponseBodyData extends $tea.Model {
    instanceList?: QueryAvailableInstancesResponseBodyDataInstanceList[];
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillResponseBodyDataItemsItem extends $tea.Model {
    adjustAmount?: number;
    afterTaxAmount?: number;
    cashAmount?: number;
    commodityCode?: string;
    currency?: string;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    invoiceDiscount?: number;
    item?: string;
    outstandingAmount?: number;
    ownerID?: string;
    paymentAmount?: number;
    paymentCurrency?: string;
    paymentTime?: string;
    paymentTransactionID?: string;
    pipCode?: string;
    pretaxAmount?: number;
    pretaxAmountLocal?: number;
    pretaxGrossAmount?: number;
    productCode?: string;
    productDetail?: string;
    productName?: string;
    productType?: string;
    recordID?: string;
    roundDownDiscount?: string;
    status?: string;
    subOrderId?: string;
    subscriptionType?: string;
    tax?: number;
    usageEndTime?: string;
    usageStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillResponseBodyDataItems extends $tea.Model {
    item?: QueryBillResponseBodyDataItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    billingCycle?: string;
    items?: QueryBillResponseBodyDataItems;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillOverviewResponseBodyDataItemsItem extends $tea.Model {
    adjustAmount?: number;
    afterTaxAmount?: number;
    billAccountID?: string;
    billAccountName?: string;
    bizType?: string;
    cashAmount?: number;
    commodityCode?: string;
    currency?: string;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    invoiceDiscount?: number;
    item?: string;
    outstandingAmount?: number;
    ownerID?: string;
    paymentAmount?: number;
    paymentCurrency?: string;
    pipCode?: string;
    pretaxAmount?: number;
    pretaxAmountLocal?: number;
    pretaxGrossAmount?: number;
    productCode?: string;
    productDetail?: string;
    productName?: string;
    productType?: string;
    roundDownDiscount?: string;
    subscriptionType?: string;
    tax?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillOverviewResponseBodyDataItems extends $tea.Model {
    item?: QueryBillOverviewResponseBodyDataItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillOverviewResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    billingCycle?: string;
    items?: QueryBillOverviewResponseBodyDataItems;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillToOSSSubscriptionResponseBodyDataItemsItem extends $tea.Model {
    bucketOwnerId?: number;
    bucketPath?: string;
    rowLimitPerFile?: number;
    subscribeBucket?: string;
    subscribeLanguage?: string;
    subscribeTime?: string;
    subscribeType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillToOSSSubscriptionResponseBodyDataItems extends $tea.Model {
    item?: QueryBillToOSSSubscriptionResponseBodyDataItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBillToOSSSubscriptionResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    items?: QueryBillToOSSSubscriptionResponseBodyDataItems;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCashCouponsResponseBodyDataCashCoupon extends $tea.Model {
    applicableProducts?: string;
    applicableScenarios?: string;
    balance?: string;
    cashCouponId?: number;
    cashCouponNo?: string;
    effectiveTime?: string;
    expiryTime?: string;
    grantedTime?: string;
    nominalValue?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCashCouponsResponseBodyData extends $tea.Model {
    cashCoupon?: QueryCashCouponsResponseBodyDataCashCoupon[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCommodityListResponseBodyDataCommodityList extends $tea.Model {
    chargeType?: string;
    commodityCode?: string;
    commodityName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCommodityListResponseBodyData extends $tea.Model {
    commodityList?: QueryCommodityListResponseBodyDataCommodityList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResponseBodyDataCostUnitDtoList extends $tea.Model {
    ownerUid?: number;
    parentUnitId?: number;
    unitId?: number;
    unitName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResponseBodyData extends $tea.Model {
    costUnitDtoList?: QueryCostUnitResponseBodyDataCostUnitDtoList[];
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResourceResponseBodyDataCostUnit extends $tea.Model {
    ownerUid?: number;
    parentUnitId?: number;
    unitId?: number;
    unitName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo extends $tea.Model {
    resourceCount?: number;
    resourceGroupCount?: number;
    subUnitCount?: number;
    totalResourceCount?: number;
    totalResourceGroupCount?: number;
    totalUserCount?: number;
    userCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList extends $tea.Model {
    apportionCode?: string;
    apportionName?: string;
    commodityCode?: string;
    commodityName?: string;
    relatedResources?: string;
    resourceGroup?: string;
    resourceId?: string;
    resourceNick?: string;
    resourceStatus?: string;
    resourceTag?: string;
    resourceType?: string;
    resourceUserId?: number;
    resourceUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCostUnitResourceResponseBodyData extends $tea.Model {
    costUnit?: QueryCostUnitResourceResponseBodyDataCostUnit;
    costUnitStatisInfo?: QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo;
    pageNum?: number;
    pageSize?: number;
    resourceInstanceDtoList?: QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress extends $tea.Model {
    addressee?: string;
    bizType?: string;
    city?: string;
    county?: string;
    deliveryAddress?: string;
    id?: number;
    phone?: string;
    postalCode?: string;
    province?: string;
    street?: string;
    userId?: number;
    userNick?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList extends $tea.Model {
    customerInvoiceAddress?: QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerAddressListResponseBodyData extends $tea.Model {
    customerInvoiceAddressList?: QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDPUtilizationDetailResponseBodyDataDetailListDetailList extends $tea.Model {
    deductDate?: string;
    deductFactorTotal?: number;
    deductHours?: number;
    deductMeasure?: number;
    deductQuantity?: number;
    deductedCommodityCode?: string;
    deductedInstanceId?: string;
    deductedProductDetail?: string;
    instanceId?: string;
    instanceSpec?: string;
    region?: string;
    resCode?: string;
    shareUid?: number;
    uid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDPUtilizationDetailResponseBodyDataDetailList extends $tea.Model {
    detailList?: QueryDPUtilizationDetailResponseBodyDataDetailListDetailList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDPUtilizationDetailResponseBodyData extends $tea.Model {
    detailList?: QueryDPUtilizationDetailResponseBodyDataDetailList;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEvaluateListResponseBodyDataEvaluateListEvaluate extends $tea.Model {
    billCycle?: string;
    billId?: number;
    bizTime?: string;
    bizType?: string;
    canInvoiceAmount?: number;
    gmtCreate?: string;
    gmtModified?: string;
    id?: number;
    invoicedAmount?: number;
    itemId?: number;
    name?: string;
    offsetAcceptAmount?: number;
    offsetCostAmount?: number;
    opId?: string;
    originalAmount?: number;
    outBizId?: string;
    presentAmount?: number;
    status?: number;
    type?: number;
    userId?: number;
    userNick?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEvaluateListResponseBodyDataEvaluateList extends $tea.Model {
    evaluate?: QueryEvaluateListResponseBodyDataEvaluateListEvaluate[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEvaluateListResponseBodyData extends $tea.Model {
    evaluateList?: QueryEvaluateListResponseBodyDataEvaluateList;
    hostId?: string;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    totalInvoiceAmount?: number;
    totalUnAppliedInvoiceAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFinancialAccountInfoResponseBodyData extends $tea.Model {
    accountType?: string;
    isFinancialAccount?: boolean;
    memberGroupId?: number;
    memberGroupName?: string;
    memberNickName?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceBillResponseBodyDataItemsItem extends $tea.Model {
    adjustAmount?: number;
    billingDate?: string;
    billingItem?: string;
    billingType?: string;
    cashAmount?: number;
    commodityCode?: string;
    costUnit?: string;
    currency?: string;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    deductedByResourcePackage?: string;
    instanceConfig?: string;
    instanceID?: string;
    instanceSpec?: string;
    internetIP?: string;
    intranetIP?: string;
    invoiceDiscount?: number;
    item?: string;
    listPrice?: string;
    listPriceUnit?: string;
    nickName?: string;
    outstandingAmount?: number;
    ownerID?: string;
    paymentAmount?: number;
    pipCode?: string;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    productCode?: string;
    productDetail?: string;
    productName?: string;
    productType?: string;
    region?: string;
    resourceGroup?: string;
    servicePeriod?: string;
    servicePeriodUnit?: string;
    subscriptionType?: string;
    tag?: string;
    usage?: string;
    usageUnit?: string;
    zone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceBillResponseBodyDataItems extends $tea.Model {
    item?: QueryInstanceBillResponseBodyDataItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceBillResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    billingCycle?: string;
    items?: QueryInstanceBillResponseBodyDataItems;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceByTagRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceByTagResponseBodyTagResourceTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceByTagResponseBodyTagResource extends $tea.Model {
    resourceId?: string;
    resourceType?: string;
    tag?: QueryInstanceByTagResponseBodyTagResourceTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceGaapCostResponseBodyDataModulesModule extends $tea.Model {
    accountingUnit?: string;
    billType?: string;
    billingCycle?: string;
    currency?: string;
    deductedByCashCoupons?: string;
    deductedByCoupons?: string;
    deductedByPrepaidCard?: string;
    gaapDeductedByCashCoupons?: string;
    gaapDeductedByCoupons?: string;
    gaapDeductedByPrepaidCard?: string;
    gaapPaymentAmount?: string;
    gaapPretaxAmount?: string;
    gaapPretaxAmountLocal?: string;
    gaapPretaxGrossAmount?: string;
    gaapPricingDiscount?: string;
    instanceID?: string;
    monthGaapDeductedByCashCoupons?: string;
    monthGaapDeductedByCoupons?: string;
    monthGaapDeductedByPrepaidCard?: string;
    monthGaapPaymentAmount?: string;
    monthGaapPretaxAmount?: string;
    monthGaapPretaxAmountLocal?: string;
    monthGaapPretaxGrossAmount?: string;
    monthGaapPricingDiscount?: string;
    orderId?: string;
    orderType?: string;
    ownerID?: string;
    payTime?: string;
    payerAccount?: string;
    paymentAmount?: string;
    paymentCurrency?: string;
    pretaxAmount?: string;
    pretaxAmountLocal?: string;
    pretaxGrossAmount?: string;
    pricingDiscount?: string;
    productCode?: string;
    productType?: string;
    region?: string;
    resourceGroup?: string;
    subOrderId?: string;
    subscriptionType?: string;
    tag?: string;
    unallocatedDeductedByCashCoupons?: string;
    unallocatedDeductedByCoupons?: string;
    unallocatedDeductedByPrepaidCard?: string;
    unallocatedPaymentAmount?: string;
    unallocatedPretaxAmount?: string;
    unallocatedPretaxAmountLocal?: string;
    unallocatedPretaxGrossAmount?: string;
    unallocatedPricingDiscount?: string;
    usageEndDate?: string;
    usageStartDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceGaapCostResponseBodyDataModules extends $tea.Model {
    module?: QueryInstanceGaapCostResponseBodyDataModulesModule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstanceGaapCostResponseBodyData extends $tea.Model {
    hostId?: string;
    modules?: QueryInstanceGaapCostResponseBodyDataModules;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice extends $tea.Model {
    adjustType?: number;
    bank?: string;
    bankNo?: string;
    customerType?: number;
    defaultRemark?: string;
    endCycle?: number;
    gmtCreate?: string;
    id?: number;
    invoiceTitle?: string;
    issueType?: number;
    operatingLicenseAddress?: string;
    operatingLicensePhone?: string;
    registerNo?: string;
    startCycle?: number;
    status?: number;
    taxationLicense?: string;
    taxpayerType?: number;
    titleChangeInstructions?: string;
    type?: number;
    userId?: number;
    userNick?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList extends $tea.Model {
    customerInvoice?: QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInvoicingCustomerListResponseBodyData extends $tea.Model {
    customerInvoiceList?: QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrdersResponseBodyDataOrderListOrder extends $tea.Model {
    afterTaxAmount?: string;
    commodityCode?: string;
    createTime?: string;
    currency?: string;
    orderId?: string;
    orderType?: string;
    paymentCurrency?: string;
    paymentStatus?: string;
    paymentTime?: string;
    pretaxAmount?: string;
    pretaxAmountLocal?: string;
    pretaxGrossAmount?: string;
    productCode?: string;
    productType?: string;
    relatedOrderId?: string;
    subscriptionType?: string;
    tax?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrdersResponseBodyDataOrderList extends $tea.Model {
    order?: QueryOrdersResponseBodyDataOrderListOrder[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrdersResponseBodyData extends $tea.Model {
    hostName?: string;
    orderList?: QueryOrdersResponseBodyDataOrderList;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPermissionListResponseBodyDataPermissionList extends $tea.Model {
    endTime?: string;
    permissionCode?: string;
    permissionName?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPermissionListResponseBodyData extends $tea.Model {
    endTime?: string;
    masterId?: number;
    memberId?: number;
    permissionList?: QueryPermissionListResponseBodyDataPermissionList[];
    relationType?: string;
    setupTime?: string;
    startTime?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPrepaidCardsResponseBodyDataPrepaidCard extends $tea.Model {
    applicableProducts?: string;
    applicableScenarios?: string;
    balance?: string;
    effectiveTime?: string;
    expiryTime?: string;
    grantedTime?: string;
    nominalValue?: string;
    prepaidCardId?: number;
    prepaidCardNo?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPrepaidCardsResponseBodyData extends $tea.Model {
    prepaidCard?: QueryPrepaidCardsResponseBodyDataPrepaidCard[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList extends $tea.Model {
    priceFactorCode?: string;
    priceFactorName?: string;
    priceFactorValueList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPriceEntityListResponseBodyDataPriceEntityInfoList extends $tea.Model {
    priceEntityCode?: string;
    priceEntityName?: string;
    priceFactorList?: QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPriceEntityListResponseBodyData extends $tea.Model {
    priceEntityInfoList?: QueryPriceEntityListResponseBodyDataPriceEntityInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyDataProductListProduct extends $tea.Model {
    productCode?: string;
    productName?: string;
    productType?: string;
    subscriptionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyDataProductList extends $tea.Model {
    product?: QueryProductListResponseBodyDataProductListProduct[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyData extends $tea.Model {
    pageNum?: number;
    pageSize?: number;
    productList?: QueryProductListResponseBodyDataProductList;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRIUtilizationDetailResponseBodyDataDetailListDetailList extends $tea.Model {
    deductDate?: string;
    deductFactorTotal?: number;
    deductHours?: string;
    deductQuantity?: number;
    deductedCommodityCode?: string;
    deductedInstanceId?: string;
    deductedProductDetail?: string;
    instanceSpec?: string;
    RIInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRIUtilizationDetailResponseBodyDataDetailList extends $tea.Model {
    detailList?: QueryRIUtilizationDetailResponseBodyDataDetailListDetailList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRIUtilizationDetailResponseBodyData extends $tea.Model {
    detailList?: QueryRIUtilizationDetailResponseBodyDataDetailList;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedeemResponseBodyDataRedeemRedeem extends $tea.Model {
    applicableProducts?: string;
    balance?: string;
    effectiveTime?: string;
    expiryTime?: string;
    grantedTime?: string;
    nominalValue?: string;
    redeemId?: string;
    redeemNo?: string;
    specification?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedeemResponseBodyDataRedeem extends $tea.Model {
    redeem?: QueryRedeemResponseBodyDataRedeemRedeem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedeemResponseBodyData extends $tea.Model {
    pageNum?: number;
    pageSize?: number;
    redeem?: QueryRedeemResponseBodyDataRedeem;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationListResponseBodyDataFinancialRelationInfoList extends $tea.Model {
    accountId?: number;
    accountName?: string;
    accountNickName?: string;
    accountType?: string;
    endTime?: string;
    relationId?: number;
    relationType?: string;
    setupTime?: string;
    startTime?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationListResponseBodyData extends $tea.Model {
    financialRelationInfoList?: QueryRelationListResponseBodyDataFinancialRelationInfoList[];
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResellerUserAlarmThresholdResponseBodyData extends $tea.Model {
    denominator?: number;
    numerator?: number;
    thresholdAmount?: string;
    thresholdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts extends $tea.Model {
    product?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourcePackageInstancesResponseBodyDataInstancesInstance extends $tea.Model {
    applicableProducts?: QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts;
    commodityCode?: string;
    deductType?: string;
    effectiveTime?: string;
    expiryTime?: string;
    instanceId?: string;
    packageType?: string;
    region?: string;
    remainingAmount?: string;
    remainingAmountUnit?: string;
    remark?: string;
    status?: string;
    totalAmount?: string;
    totalAmountUnit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourcePackageInstancesResponseBodyDataInstances extends $tea.Model {
    instance?: QueryResourcePackageInstancesResponseBodyDataInstancesInstance[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourcePackageInstancesResponseBodyData extends $tea.Model {
    hostId?: string;
    instances?: QueryResourcePackageInstancesResponseBodyDataInstances;
    pageNum?: string;
    pageSize?: string;
    totalCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDeductLogResponseBodyDataItems extends $tea.Model {
    billModule?: string;
    deductCommodity?: string;
    deductFee?: string;
    deductInstanceId?: string;
    deductRate?: string;
    discountRate?: string;
    endTime?: string;
    instanceId?: string;
    ownerId?: number;
    savingsType?: string;
    startTime?: string;
    userId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDeductLogResponseBodyData extends $tea.Model {
    items?: QuerySavingsPlansDeductLogResponseBodyDataItems[];
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDiscountResponseBodyDataItems extends $tea.Model {
    commodityName?: string;
    contractDiscountRate?: string;
    cycle?: string;
    discountRate?: string;
    moduleName?: string;
    payMode?: string;
    region?: string;
    spec?: string;
    spnType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansDiscountResponseBodyData extends $tea.Model {
    hostId?: string;
    items?: QuerySavingsPlansDiscountResponseBodyDataItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansInstanceRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansInstanceResponseBodyDataItemsTags extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansInstanceResponseBodyDataItems extends $tea.Model {
    allocationStatus?: string;
    currency?: string;
    cycle?: string;
    deductCycleType?: string;
    endTime?: string;
    endTimestamp?: number;
    instanceFamily?: string;
    instanceId?: string;
    lastBillTotalUsage?: string;
    lastBillUtilization?: string;
    payMode?: string;
    poolValue?: string;
    prepayFee?: string;
    region?: string;
    restPoolValue?: string;
    savingsType?: string;
    startTime?: string;
    startTimestamp?: number;
    status?: string;
    tags?: QuerySavingsPlansInstanceResponseBodyDataItemsTags[];
    totalSave?: string;
    utilization?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySavingsPlansInstanceResponseBodyData extends $tea.Model {
    items?: QuerySavingsPlansInstanceResponseBodyDataItems[];
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySettleBillResponseBodyDataItemsItem extends $tea.Model {
    adjustAmount?: number;
    afterTaxAmount?: number;
    billAccountID?: string;
    billAccountName?: string;
    bizType?: string;
    cashAmount?: number;
    commodityCode?: string;
    currency?: string;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    invoiceDiscount?: number;
    item?: string;
    outstandingAmount?: number;
    ownerID?: string;
    paymentAmount?: number;
    paymentCurrency?: string;
    paymentTime?: string;
    paymentTransactionID?: string;
    pipCode?: string;
    pretaxAmount?: number;
    pretaxAmountLocal?: number;
    pretaxGrossAmount?: number;
    productCode?: string;
    productDetail?: string;
    productName?: string;
    productType?: string;
    recordID?: string;
    roundDownDiscount?: string;
    status?: string;
    subOrderId?: string;
    subscriptionType?: string;
    tax?: number;
    usageEndTime?: string;
    usageStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySettleBillResponseBodyDataItems extends $tea.Model {
    item?: QuerySettleBillResponseBodyDataItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySettleBillResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    billingCycle?: string;
    items?: QuerySettleBillResponseBodyDataItems;
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList extends $tea.Model {
    factorCode?: string;
    max?: string;
    min?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList extends $tea.Model {
    cskuCode?: string;
    currency?: string;
    price?: string;
    priceMode?: string;
    priceType?: string;
    priceUnit?: string;
    rangeList?: QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList[];
    usageUnit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList extends $tea.Model {
    cskuPriceList?: QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList[];
    skuCode?: string;
    skuFactorMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListResponseBodyDataSkuPricePage extends $tea.Model {
    nextPageToken?: string;
    skuPriceList?: QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySkuPriceListResponseBodyData extends $tea.Model {
    skuPricePage?: QuerySkuPriceListResponseBodyDataSkuPricePage;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySplitItemBillResponseBodyDataItemsItem extends $tea.Model {
    adjustAmount?: number;
    billingDate?: string;
    billingItem?: string;
    billingType?: string;
    cashAmount?: number;
    commodityCode?: string;
    costUnit?: string;
    currency?: string;
    deductedByCashCoupons?: number;
    deductedByCoupons?: number;
    deductedByPrepaidCard?: number;
    deductedByResourcePackage?: string;
    instanceConfig?: string;
    instanceID?: string;
    instanceSpec?: string;
    internetIP?: string;
    intranetIP?: string;
    invoiceDiscount?: number;
    item?: string;
    listPrice?: string;
    listPriceUnit?: string;
    nickName?: string;
    outstandingAmount?: number;
    ownerID?: string;
    paymentAmount?: number;
    pipCode?: string;
    pretaxAmount?: number;
    pretaxGrossAmount?: number;
    productCode?: string;
    productDetail?: string;
    productName?: string;
    productType?: string;
    region?: string;
    resourceGroup?: string;
    servicePeriod?: string;
    servicePeriodUnit?: string;
    splitAccountID?: string;
    splitAccountName?: string;
    splitBillingCycle?: string;
    splitCommodityCode?: string;
    splitItemID?: string;
    splitItemName?: string;
    splitProductDetail?: string;
    subscriptionType?: string;
    tag?: string;
    usage?: string;
    usageUnit?: string;
    zone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySplitItemBillResponseBodyDataItems extends $tea.Model {
    item?: QuerySplitItemBillResponseBodyDataItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySplitItemBillResponseBodyData extends $tea.Model {
    accountID?: string;
    accountName?: string;
    billingCycle?: string;
    items?: QuerySplitItemBillResponseBodyDataItems;
    pageNum?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserOmsDataResponseBodyData extends $tea.Model {
    hostId?: string;
    marker?: string;
    omsData?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefundInstanceResponseBodyData extends $tea.Model {
    hostId?: string;
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstanceResponseBodyData extends $tea.Model {
    hostId?: string;
    releaseResult?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelieveAccountRelationResponseBodyData extends $tea.Model {
    hostId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceResponseBodyData extends $tea.Model {
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewResourcePackageResponseBodyData extends $tea.Model {
    instanceId?: string;
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeResourcePackageResponseBodyData extends $tea.Model {
    instanceId?: string;
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    /**
      * 1\\. For more information about a financial relationship, see [Financial relationships](https://help.aliyun.com/document_detail/100376.html?spm=a2c4g.11186623.6.563.52a83908ypl4yE) or [Financial relationships](https://www.alibabacloud.com/help/en/doc-detail/116383.html). 2. If enterprise names used by the management account and a member for real-name verification are the same, you do not need to call an API operation for confirmation. Otherwise, you must call the ConfirmRelation operation for confirmation.
      *
      * @param request AddAccountRelationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return AddAccountRelationResponse
     */
    addAccountRelationWithOptions(request: AddAccountRelationRequest, runtime: $Util.RuntimeOptions): Promise<AddAccountRelationResponse>;
    /**
      * 1\\. For more information about a financial relationship, see [Financial relationships](https://help.aliyun.com/document_detail/100376.html?spm=a2c4g.11186623.6.563.52a83908ypl4yE) or [Financial relationships](https://www.alibabacloud.com/help/en/doc-detail/116383.html). 2. If enterprise names used by the management account and a member for real-name verification are the same, you do not need to call an API operation for confirmation. Otherwise, you must call the ConfirmRelation operation for confirmation.
      *
      * @param request AddAccountRelationRequest
      * @return AddAccountRelationResponse
     */
    addAccountRelation(request: AddAccountRelationRequest): Promise<AddAccountRelationResponse>;
    allocateCostUnitResourceWithOptions(request: AllocateCostUnitResourceRequest, runtime: $Util.RuntimeOptions): Promise<AllocateCostUnitResourceResponse>;
    allocateCostUnitResource(request: AllocateCostUnitResourceRequest): Promise<AllocateCostUnitResourceResponse>;
    applyInvoiceWithOptions(request: ApplyInvoiceRequest, runtime: $Util.RuntimeOptions): Promise<ApplyInvoiceResponse>;
    applyInvoice(request: ApplyInvoiceRequest): Promise<ApplyInvoiceResponse>;
    cancelOrderWithOptions(request: CancelOrderRequest, runtime: $Util.RuntimeOptions): Promise<CancelOrderResponse>;
    cancelOrder(request: CancelOrderRequest): Promise<CancelOrderResponse>;
    changeResellerConsumeAmountWithOptions(request: ChangeResellerConsumeAmountRequest, runtime: $Util.RuntimeOptions): Promise<ChangeResellerConsumeAmountResponse>;
    changeResellerConsumeAmount(request: ChangeResellerConsumeAmountRequest): Promise<ChangeResellerConsumeAmountResponse>;
    /**
      * 1\\. A member needs to confirm an invitation only if a financial management relationship is established between the management account and the member and enterprise names used by the management account and the member for real-name verification are different. 2. The permissions to be confirmed must be the same as those granted to the member when the management account initiates the invitation.
      *
      * @param request ConfirmRelationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ConfirmRelationResponse
     */
    confirmRelationWithOptions(request: ConfirmRelationRequest, runtime: $Util.RuntimeOptions): Promise<ConfirmRelationResponse>;
    /**
      * 1\\. A member needs to confirm an invitation only if a financial management relationship is established between the management account and the member and enterprise names used by the management account and the member for real-name verification are different. 2. The permissions to be confirmed must be the same as those granted to the member when the management account initiates the invitation.
      *
      * @param request ConfirmRelationRequest
      * @return ConfirmRelationResponse
     */
    confirmRelation(request: ConfirmRelationRequest): Promise<ConfirmRelationResponse>;
    convertChargeTypeWithOptions(request: ConvertChargeTypeRequest, runtime: $Util.RuntimeOptions): Promise<ConvertChargeTypeResponse>;
    convertChargeType(request: ConvertChargeTypeRequest): Promise<ConvertChargeTypeResponse>;
    /**
      * You can call this operation to create an account so as to establish a master-member financial relationship.
      *
      * @param request CreateAgAccountRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateAgAccountResponse
     */
    createAgAccountWithOptions(request: CreateAgAccountRequest, runtime: $Util.RuntimeOptions): Promise<CreateAgAccountResponse>;
    /**
      * You can call this operation to create an account so as to establish a master-member financial relationship.
      *
      * @param request CreateAgAccountRequest
      * @return CreateAgAccountResponse
     */
    createAgAccount(request: CreateAgAccountRequest): Promise<CreateAgAccountResponse>;
    createCostUnitWithOptions(request: CreateCostUnitRequest, runtime: $Util.RuntimeOptions): Promise<CreateCostUnitResponse>;
    createCostUnit(request: CreateCostUnitRequest): Promise<CreateCostUnitResponse>;
    createInstanceWithOptions(request: CreateInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateInstanceResponse>;
    createInstance(request: CreateInstanceRequest): Promise<CreateInstanceResponse>;
    createResellerUserQuotaWithOptions(request: CreateResellerUserQuotaRequest, runtime: $Util.RuntimeOptions): Promise<CreateResellerUserQuotaResponse>;
    createResellerUserQuota(request: CreateResellerUserQuotaRequest): Promise<CreateResellerUserQuotaResponse>;
    createResourcePackageWithOptions(request: CreateResourcePackageRequest, runtime: $Util.RuntimeOptions): Promise<CreateResourcePackageResponse>;
    createResourcePackage(request: CreateResourcePackageRequest): Promise<CreateResourcePackageResponse>;
    createSavingsPlansInstanceWithOptions(tmpReq: CreateSavingsPlansInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateSavingsPlansInstanceResponse>;
    createSavingsPlansInstance(request: CreateSavingsPlansInstanceRequest): Promise<CreateSavingsPlansInstanceResponse>;
    deleteCostUnitWithOptions(request: DeleteCostUnitRequest, runtime: $Util.RuntimeOptions): Promise<DeleteCostUnitResponse>;
    deleteCostUnit(request: DeleteCostUnitRequest): Promise<DeleteCostUnitResponse>;
    /**
      * This operation is in beta testing and is only available for specific users in the whitelist. Excessive calls may result in performance issues. For example, the response times out.
      *
      * @param request DescribeCostBudgetsSummaryRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCostBudgetsSummaryResponse
     */
    describeCostBudgetsSummaryWithOptions(request: DescribeCostBudgetsSummaryRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCostBudgetsSummaryResponse>;
    /**
      * This operation is in beta testing and is only available for specific users in the whitelist. Excessive calls may result in performance issues. For example, the response times out.
      *
      * @param request DescribeCostBudgetsSummaryRequest
      * @return DescribeCostBudgetsSummaryResponse
     */
    describeCostBudgetsSummary(request: DescribeCostBudgetsSummaryRequest): Promise<DescribeCostBudgetsSummaryResponse>;
    /**
      * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
      *
      * @param request DescribeInstanceAmortizedCostByAmortizationPeriodRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstanceAmortizedCostByAmortizationPeriodResponse
     */
    describeInstanceAmortizedCostByAmortizationPeriodWithOptions(request: DescribeInstanceAmortizedCostByAmortizationPeriodRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceAmortizedCostByAmortizationPeriodResponse>;
    /**
      * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
      *
      * @param request DescribeInstanceAmortizedCostByAmortizationPeriodRequest
      * @return DescribeInstanceAmortizedCostByAmortizationPeriodResponse
     */
    describeInstanceAmortizedCostByAmortizationPeriod(request: DescribeInstanceAmortizedCostByAmortizationPeriodRequest): Promise<DescribeInstanceAmortizedCostByAmortizationPeriodResponse>;
    describeInstanceAmortizedCostByAmortizationPeriodDateWithOptions(request: DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse>;
    describeInstanceAmortizedCostByAmortizationPeriodDate(request: DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest): Promise<DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse>;
    describeInstanceAmortizedCostByConsumePeriodWithOptions(request: DescribeInstanceAmortizedCostByConsumePeriodRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceAmortizedCostByConsumePeriodResponse>;
    describeInstanceAmortizedCostByConsumePeriod(request: DescribeInstanceAmortizedCostByConsumePeriodRequest): Promise<DescribeInstanceAmortizedCostByConsumePeriodResponse>;
    /**
      * *   Instance bills are generated after the total bill is split. In most cases, the instance bills do not include data generated on the last day of the specified billing cycle.
      * *   The instance information may change during the billing cycle. The instance configurations and types in monthly bills are subject to the point in time when you query bills. For more information, see the corresponding bill details.
      * *   You can query data generated after June 2020 for Cloud Communications services. You can query data generated after November 2020 for Alibaba Cloud Domains.
      *
      * @param request DescribeInstanceBillRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstanceBillResponse
     */
    describeInstanceBillWithOptions(request: DescribeInstanceBillRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceBillResponse>;
    /**
      * *   Instance bills are generated after the total bill is split. In most cases, the instance bills do not include data generated on the last day of the specified billing cycle.
      * *   The instance information may change during the billing cycle. The instance configurations and types in monthly bills are subject to the point in time when you query bills. For more information, see the corresponding bill details.
      * *   You can query data generated after June 2020 for Cloud Communications services. You can query data generated after November 2020 for Alibaba Cloud Domains.
      *
      * @param request DescribeInstanceBillRequest
      * @return DescribeInstanceBillResponse
     */
    describeInstanceBill(request: DescribeInstanceBillRequest): Promise<DescribeInstanceBillResponse>;
    describePricingModuleWithOptions(request: DescribePricingModuleRequest, runtime: $Util.RuntimeOptions): Promise<DescribePricingModuleResponse>;
    describePricingModule(request: DescribePricingModuleRequest): Promise<DescribePricingModuleResponse>;
    /**
      * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
      *
      * @param request DescribeProductAmortizedCostByAmortizationPeriodRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeProductAmortizedCostByAmortizationPeriodResponse
     */
    describeProductAmortizedCostByAmortizationPeriodWithOptions(request: DescribeProductAmortizedCostByAmortizationPeriodRequest, runtime: $Util.RuntimeOptions): Promise<DescribeProductAmortizedCostByAmortizationPeriodResponse>;
    /**
      * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
      *
      * @param request DescribeProductAmortizedCostByAmortizationPeriodRequest
      * @return DescribeProductAmortizedCostByAmortizationPeriodResponse
     */
    describeProductAmortizedCostByAmortizationPeriod(request: DescribeProductAmortizedCostByAmortizationPeriodRequest): Promise<DescribeProductAmortizedCostByAmortizationPeriodResponse>;
    describeProductAmortizedCostByConsumePeriodWithOptions(request: DescribeProductAmortizedCostByConsumePeriodRequest, runtime: $Util.RuntimeOptions): Promise<DescribeProductAmortizedCostByConsumePeriodResponse>;
    describeProductAmortizedCostByConsumePeriod(request: DescribeProductAmortizedCostByConsumePeriodRequest): Promise<DescribeProductAmortizedCostByConsumePeriodResponse>;
    /**
      * The amount of the resources deducted from a deduction plan.
      *
      * @param request DescribeResourceCoverageDetailRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeResourceCoverageDetailResponse
     */
    describeResourceCoverageDetailWithOptions(request: DescribeResourceCoverageDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeResourceCoverageDetailResponse>;
    /**
      * The amount of the resources deducted from a deduction plan.
      *
      * @param request DescribeResourceCoverageDetailRequest
      * @return DescribeResourceCoverageDetailResponse
     */
    describeResourceCoverageDetail(request: DescribeResourceCoverageDetailRequest): Promise<DescribeResourceCoverageDetailResponse>;
    /**
      * Indicates whether the operation was successful.
      *
      * @param request DescribeResourceCoverageTotalRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeResourceCoverageTotalResponse
     */
    describeResourceCoverageTotalWithOptions(request: DescribeResourceCoverageTotalRequest, runtime: $Util.RuntimeOptions): Promise<DescribeResourceCoverageTotalResponse>;
    /**
      * Indicates whether the operation was successful.
      *
      * @param request DescribeResourceCoverageTotalRequest
      * @return DescribeResourceCoverageTotalResponse
     */
    describeResourceCoverageTotal(request: DescribeResourceCoverageTotalRequest): Promise<DescribeResourceCoverageTotalResponse>;
    describeResourcePackageProductWithOptions(request: DescribeResourcePackageProductRequest, runtime: $Util.RuntimeOptions): Promise<DescribeResourcePackageProductResponse>;
    describeResourcePackageProduct(request: DescribeResourcePackageProductRequest): Promise<DescribeResourcePackageProductResponse>;
    describeResourceUsageDetailWithOptions(request: DescribeResourceUsageDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeResourceUsageDetailResponse>;
    describeResourceUsageDetail(request: DescribeResourceUsageDetailRequest): Promise<DescribeResourceUsageDetailResponse>;
    describeResourceUsageTotalWithOptions(request: DescribeResourceUsageTotalRequest, runtime: $Util.RuntimeOptions): Promise<DescribeResourceUsageTotalResponse>;
    describeResourceUsageTotal(request: DescribeResourceUsageTotalRequest): Promise<DescribeResourceUsageTotalResponse>;
    describeSavingsPlansCoverageDetailWithOptions(request: DescribeSavingsPlansCoverageDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSavingsPlansCoverageDetailResponse>;
    describeSavingsPlansCoverageDetail(request: DescribeSavingsPlansCoverageDetailRequest): Promise<DescribeSavingsPlansCoverageDetailResponse>;
    describeSavingsPlansCoverageTotalWithOptions(request: DescribeSavingsPlansCoverageTotalRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSavingsPlansCoverageTotalResponse>;
    describeSavingsPlansCoverageTotal(request: DescribeSavingsPlansCoverageTotalRequest): Promise<DescribeSavingsPlansCoverageTotalResponse>;
    describeSavingsPlansUsageDetailWithOptions(request: DescribeSavingsPlansUsageDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSavingsPlansUsageDetailResponse>;
    describeSavingsPlansUsageDetail(request: DescribeSavingsPlansUsageDetailRequest): Promise<DescribeSavingsPlansUsageDetailResponse>;
    describeSavingsPlansUsageTotalWithOptions(request: DescribeSavingsPlansUsageTotalRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSavingsPlansUsageTotalResponse>;
    describeSavingsPlansUsageTotal(request: DescribeSavingsPlansUsageTotalRequest): Promise<DescribeSavingsPlansUsageTotalResponse>;
    /**
      * The code of the service.
      *
      * @param request DescribeSplitItemBillRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSplitItemBillResponse
     */
    describeSplitItemBillWithOptions(request: DescribeSplitItemBillRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSplitItemBillResponse>;
    /**
      * The code of the service.
      *
      * @param request DescribeSplitItemBillRequest
      * @return DescribeSplitItemBillResponse
     */
    describeSplitItemBill(request: DescribeSplitItemBillRequest): Promise<DescribeSplitItemBillResponse>;
    enableBillGenerationWithOptions(request: EnableBillGenerationRequest, runtime: $Util.RuntimeOptions): Promise<EnableBillGenerationResponse>;
    enableBillGeneration(request: EnableBillGenerationRequest): Promise<EnableBillGenerationResponse>;
    getAccountRelationWithOptions(request: GetAccountRelationRequest, runtime: $Util.RuntimeOptions): Promise<GetAccountRelationResponse>;
    getAccountRelation(request: GetAccountRelationRequest): Promise<GetAccountRelationResponse>;
    getCustomerAccountInfoWithOptions(request: GetCustomerAccountInfoRequest, runtime: $Util.RuntimeOptions): Promise<GetCustomerAccountInfoResponse>;
    getCustomerAccountInfo(request: GetCustomerAccountInfoRequest): Promise<GetCustomerAccountInfoResponse>;
    /**
      * The ID of the customer.
      *
      * @param request GetCustomerListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetCustomerListResponse
     */
    getCustomerListWithOptions(runtime: $Util.RuntimeOptions): Promise<GetCustomerListResponse>;
    /**
      * The ID of the customer.
      *
      * @return GetCustomerListResponse
     */
    getCustomerList(): Promise<GetCustomerListResponse>;
    getOrderDetailWithOptions(request: GetOrderDetailRequest, runtime: $Util.RuntimeOptions): Promise<GetOrderDetailResponse>;
    getOrderDetail(request: GetOrderDetailRequest): Promise<GetOrderDetailResponse>;
    /**
      * ### Usage notes
      * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
      * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
      * 3.  Call the GetPayAsYouGoPrice operation to obtain the pay-as-you-go price of the service based on the returned configuration parameters.
      *
      * @param request GetPayAsYouGoPriceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetPayAsYouGoPriceResponse
     */
    getPayAsYouGoPriceWithOptions(request: GetPayAsYouGoPriceRequest, runtime: $Util.RuntimeOptions): Promise<GetPayAsYouGoPriceResponse>;
    /**
      * ### Usage notes
      * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
      * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
      * 3.  Call the GetPayAsYouGoPrice operation to obtain the pay-as-you-go price of the service based on the returned configuration parameters.
      *
      * @param request GetPayAsYouGoPriceRequest
      * @return GetPayAsYouGoPriceResponse
     */
    getPayAsYouGoPrice(request: GetPayAsYouGoPriceRequest): Promise<GetPayAsYouGoPriceResponse>;
    getResourcePackagePriceWithOptions(request: GetResourcePackagePriceRequest, runtime: $Util.RuntimeOptions): Promise<GetResourcePackagePriceResponse>;
    getResourcePackagePrice(request: GetResourcePackagePriceRequest): Promise<GetResourcePackagePriceResponse>;
    /**
      * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
      * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
      * 3.  Call the GetSubscriptionPrice operation to obtain the pricing of the service based on the returned configuration parameters.
      *
      * @param request GetSubscriptionPriceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetSubscriptionPriceResponse
     */
    getSubscriptionPriceWithOptions(request: GetSubscriptionPriceRequest, runtime: $Util.RuntimeOptions): Promise<GetSubscriptionPriceResponse>;
    /**
      * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
      * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
      * 3.  Call the GetSubscriptionPrice operation to obtain the pricing of the service based on the returned configuration parameters.
      *
      * @param request GetSubscriptionPriceRequest
      * @return GetSubscriptionPriceResponse
     */
    getSubscriptionPrice(request: GetSubscriptionPriceRequest): Promise<GetSubscriptionPriceResponse>;
    /**
      * 1.  **Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.**
      * 2.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
      * 3.  For more information, see [Rules for unsubscribing from resources](https://help.aliyun.com/knowledge_detail/116043.html?spm=a2c81.e1d666e.app.2.62ae11271Kd6iM).
      *
      * @param request InquiryPriceRefundInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return InquiryPriceRefundInstanceResponse
     */
    inquiryPriceRefundInstanceWithOptions(request: InquiryPriceRefundInstanceRequest, runtime: $Util.RuntimeOptions): Promise<InquiryPriceRefundInstanceResponse>;
    /**
      * 1.  **Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.**
      * 2.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
      * 3.  For more information, see [Rules for unsubscribing from resources](https://help.aliyun.com/knowledge_detail/116043.html?spm=a2c81.e1d666e.app.2.62ae11271Kd6iM).
      *
      * @param request InquiryPriceRefundInstanceRequest
      * @return InquiryPriceRefundInstanceResponse
     */
    inquiryPriceRefundInstance(request: InquiryPriceRefundInstanceRequest): Promise<InquiryPriceRefundInstanceResponse>;
    modifyAccountRelationWithOptions(request: ModifyAccountRelationRequest, runtime: $Util.RuntimeOptions): Promise<ModifyAccountRelationResponse>;
    modifyAccountRelation(request: ModifyAccountRelationRequest): Promise<ModifyAccountRelationResponse>;
    modifyCostUnitWithOptions(request: ModifyCostUnitRequest, runtime: $Util.RuntimeOptions): Promise<ModifyCostUnitResponse>;
    modifyCostUnit(request: ModifyCostUnitRequest): Promise<ModifyCostUnitResponse>;
    modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceResponse>;
    modifyInstance(request: ModifyInstanceRequest): Promise<ModifyInstanceResponse>;
    queryAccountBalanceWithOptions(runtime: $Util.RuntimeOptions): Promise<QueryAccountBalanceResponse>;
    queryAccountBalance(): Promise<QueryAccountBalanceResponse>;
    /**
      * ##
      * Before you call this operation, take note of the following items:
      * *   Account bills are summarized based on instance bills. In most cases, the account bills do not include the data generated on the last day of the specified period.
      * *   You can query the data generated in June 2020 or later for Cloud Communications services. However, the query results do not include the data of Alibaba Cloud Domains.
      *
      * @param request QueryAccountBillRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryAccountBillResponse
     */
    queryAccountBillWithOptions(request: QueryAccountBillRequest, runtime: $Util.RuntimeOptions): Promise<QueryAccountBillResponse>;
    /**
      * ##
      * Before you call this operation, take note of the following items:
      * *   Account bills are summarized based on instance bills. In most cases, the account bills do not include the data generated on the last day of the specified period.
      * *   You can query the data generated in June 2020 or later for Cloud Communications services. However, the query results do not include the data of Alibaba Cloud Domains.
      *
      * @param request QueryAccountBillRequest
      * @return QueryAccountBillResponse
     */
    queryAccountBill(request: QueryAccountBillRequest): Promise<QueryAccountBillResponse>;
    queryAccountTransactionDetailsWithOptions(request: QueryAccountTransactionDetailsRequest, runtime: $Util.RuntimeOptions): Promise<QueryAccountTransactionDetailsResponse>;
    queryAccountTransactionDetails(request: QueryAccountTransactionDetailsRequest): Promise<QueryAccountTransactionDetailsResponse>;
    queryAccountTransactionsWithOptions(request: QueryAccountTransactionsRequest, runtime: $Util.RuntimeOptions): Promise<QueryAccountTransactionsResponse>;
    queryAccountTransactions(request: QueryAccountTransactionsRequest): Promise<QueryAccountTransactionsResponse>;
    queryAvailableInstancesWithOptions(request: QueryAvailableInstancesRequest, runtime: $Util.RuntimeOptions): Promise<QueryAvailableInstancesResponse>;
    queryAvailableInstances(request: QueryAvailableInstancesRequest): Promise<QueryAvailableInstancesResponse>;
    queryBillWithOptions(request: QueryBillRequest, runtime: $Util.RuntimeOptions): Promise<QueryBillResponse>;
    queryBill(request: QueryBillRequest): Promise<QueryBillResponse>;
    queryBillOverviewWithOptions(request: QueryBillOverviewRequest, runtime: $Util.RuntimeOptions): Promise<QueryBillOverviewResponse>;
    queryBillOverview(request: QueryBillOverviewRequest): Promise<QueryBillOverviewResponse>;
    queryBillToOSSSubscriptionWithOptions(runtime: $Util.RuntimeOptions): Promise<QueryBillToOSSSubscriptionResponse>;
    queryBillToOSSSubscription(): Promise<QueryBillToOSSSubscriptionResponse>;
    queryCashCouponsWithOptions(request: QueryCashCouponsRequest, runtime: $Util.RuntimeOptions): Promise<QueryCashCouponsResponse>;
    queryCashCoupons(request: QueryCashCouponsRequest): Promise<QueryCashCouponsResponse>;
    /**
      * You can call this operation to query the information about a service based on the service code.
      *
      * @param request QueryCommodityListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryCommodityListResponse
     */
    queryCommodityListWithOptions(request: QueryCommodityListRequest, runtime: $Util.RuntimeOptions): Promise<QueryCommodityListResponse>;
    /**
      * You can call this operation to query the information about a service based on the service code.
      *
      * @param request QueryCommodityListRequest
      * @return QueryCommodityListResponse
     */
    queryCommodityList(request: QueryCommodityListRequest): Promise<QueryCommodityListResponse>;
    queryCostUnitWithOptions(request: QueryCostUnitRequest, runtime: $Util.RuntimeOptions): Promise<QueryCostUnitResponse>;
    queryCostUnit(request: QueryCostUnitRequest): Promise<QueryCostUnitResponse>;
    queryCostUnitResourceWithOptions(request: QueryCostUnitResourceRequest, runtime: $Util.RuntimeOptions): Promise<QueryCostUnitResourceResponse>;
    queryCostUnitResource(request: QueryCostUnitResourceRequest): Promise<QueryCostUnitResourceResponse>;
    queryCustomerAddressListWithOptions(request: QueryCustomerAddressListRequest, runtime: $Util.RuntimeOptions): Promise<QueryCustomerAddressListResponse>;
    queryCustomerAddressList(request: QueryCustomerAddressListRequest): Promise<QueryCustomerAddressListResponse>;
    /**
      * The UID of the deducted instance.
      *
      * @param request QueryDPUtilizationDetailRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDPUtilizationDetailResponse
     */
    queryDPUtilizationDetailWithOptions(request: QueryDPUtilizationDetailRequest, runtime: $Util.RuntimeOptions): Promise<QueryDPUtilizationDetailResponse>;
    /**
      * The UID of the deducted instance.
      *
      * @param request QueryDPUtilizationDetailRequest
      * @return QueryDPUtilizationDetailResponse
     */
    queryDPUtilizationDetail(request: QueryDPUtilizationDetailRequest): Promise<QueryDPUtilizationDetailResponse>;
    queryEvaluateListWithOptions(request: QueryEvaluateListRequest, runtime: $Util.RuntimeOptions): Promise<QueryEvaluateListResponse>;
    queryEvaluateList(request: QueryEvaluateListRequest): Promise<QueryEvaluateListResponse>;
    queryFinancialAccountInfoWithOptions(request: QueryFinancialAccountInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryFinancialAccountInfoResponse>;
    queryFinancialAccountInfo(request: QueryFinancialAccountInfoRequest): Promise<QueryFinancialAccountInfoResponse>;
    /**
      * ##
      * *   This API operation has been upgraded to DescribeInstanceBill. We recommend that you call the [DescribeInstanceBill](~~209402~~) operation to query the bills of instances or billable items in a billing cycle. You can call the QueryInstanceBill operation to query a maximum of 50,000 data rows in a bill.
      * *   Instance bills are generated after bills are split. In most cases, the instance bills do not include data generated on the last day of the specified period.
      * *   The instance information changes within a billing cycle. The instance configurations and specifications and the time when the instance was used in the billing cycle are all recorded. For more information, see the corresponding bill details.
      * *   You can query the data generated in June 2020 or later for Cloud Communications services, and the data generated in November 2020 or later for Alibaba Cloud Domains.
      *
      * @param request QueryInstanceBillRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryInstanceBillResponse
     */
    queryInstanceBillWithOptions(request: QueryInstanceBillRequest, runtime: $Util.RuntimeOptions): Promise<QueryInstanceBillResponse>;
    /**
      * ##
      * *   This API operation has been upgraded to DescribeInstanceBill. We recommend that you call the [DescribeInstanceBill](~~209402~~) operation to query the bills of instances or billable items in a billing cycle. You can call the QueryInstanceBill operation to query a maximum of 50,000 data rows in a bill.
      * *   Instance bills are generated after bills are split. In most cases, the instance bills do not include data generated on the last day of the specified period.
      * *   The instance information changes within a billing cycle. The instance configurations and specifications and the time when the instance was used in the billing cycle are all recorded. For more information, see the corresponding bill details.
      * *   You can query the data generated in June 2020 or later for Cloud Communications services, and the data generated in November 2020 or later for Alibaba Cloud Domains.
      *
      * @param request QueryInstanceBillRequest
      * @return QueryInstanceBillResponse
     */
    queryInstanceBill(request: QueryInstanceBillRequest): Promise<QueryInstanceBillResponse>;
    queryInstanceByTagWithOptions(request: QueryInstanceByTagRequest, runtime: $Util.RuntimeOptions): Promise<QueryInstanceByTagResponse>;
    queryInstanceByTag(request: QueryInstanceByTagRequest): Promise<QueryInstanceByTagResponse>;
    queryInstanceGaapCostWithOptions(request: QueryInstanceGaapCostRequest, runtime: $Util.RuntimeOptions): Promise<QueryInstanceGaapCostResponse>;
    queryInstanceGaapCost(request: QueryInstanceGaapCostRequest): Promise<QueryInstanceGaapCostResponse>;
    queryInvoicingCustomerListWithOptions(request: QueryInvoicingCustomerListRequest, runtime: $Util.RuntimeOptions): Promise<QueryInvoicingCustomerListResponse>;
    queryInvoicingCustomerList(request: QueryInvoicingCustomerListRequest): Promise<QueryInvoicingCustomerListResponse>;
    queryOrdersWithOptions(request: QueryOrdersRequest, runtime: $Util.RuntimeOptions): Promise<QueryOrdersResponse>;
    queryOrders(request: QueryOrdersRequest): Promise<QueryOrdersResponse>;
    queryPermissionListWithOptions(request: QueryPermissionListRequest, runtime: $Util.RuntimeOptions): Promise<QueryPermissionListResponse>;
    queryPermissionList(request: QueryPermissionListRequest): Promise<QueryPermissionListResponse>;
    queryPrepaidCardsWithOptions(request: QueryPrepaidCardsRequest, runtime: $Util.RuntimeOptions): Promise<QueryPrepaidCardsResponse>;
    queryPrepaidCards(request: QueryPrepaidCardsRequest): Promise<QueryPrepaidCardsResponse>;
    /**
      * You can call this operation to query the billable items of a service. A billable item is the minimum unit used to calculate costs.
      *
      * @param request QueryPriceEntityListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryPriceEntityListResponse
     */
    queryPriceEntityListWithOptions(request: QueryPriceEntityListRequest, runtime: $Util.RuntimeOptions): Promise<QueryPriceEntityListResponse>;
    /**
      * You can call this operation to query the billable items of a service. A billable item is the minimum unit used to calculate costs.
      *
      * @param request QueryPriceEntityListRequest
      * @return QueryPriceEntityListResponse
     */
    queryPriceEntityList(request: QueryPriceEntityListRequest): Promise<QueryPriceEntityListResponse>;
    queryProductListWithOptions(request: QueryProductListRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductListResponse>;
    queryProductList(request: QueryProductListRequest): Promise<QueryProductListResponse>;
    queryRIUtilizationDetailWithOptions(request: QueryRIUtilizationDetailRequest, runtime: $Util.RuntimeOptions): Promise<QueryRIUtilizationDetailResponse>;
    queryRIUtilizationDetail(request: QueryRIUtilizationDetailRequest): Promise<QueryRIUtilizationDetailResponse>;
    queryRedeemWithOptions(request: QueryRedeemRequest, runtime: $Util.RuntimeOptions): Promise<QueryRedeemResponse>;
    queryRedeem(request: QueryRedeemRequest): Promise<QueryRedeemResponse>;
    queryRelationListWithOptions(request: QueryRelationListRequest, runtime: $Util.RuntimeOptions): Promise<QueryRelationListResponse>;
    queryRelationList(request: QueryRelationListRequest): Promise<QueryRelationListResponse>;
    queryResellerAvailableQuotaWithOptions(request: QueryResellerAvailableQuotaRequest, runtime: $Util.RuntimeOptions): Promise<QueryResellerAvailableQuotaResponse>;
    queryResellerAvailableQuota(request: QueryResellerAvailableQuotaRequest): Promise<QueryResellerAvailableQuotaResponse>;
    queryResellerUserAlarmThresholdWithOptions(request: QueryResellerUserAlarmThresholdRequest, runtime: $Util.RuntimeOptions): Promise<QueryResellerUserAlarmThresholdResponse>;
    queryResellerUserAlarmThreshold(request: QueryResellerUserAlarmThresholdRequest): Promise<QueryResellerUserAlarmThresholdResponse>;
    queryResourcePackageInstancesWithOptions(request: QueryResourcePackageInstancesRequest, runtime: $Util.RuntimeOptions): Promise<QueryResourcePackageInstancesResponse>;
    queryResourcePackageInstances(request: QueryResourcePackageInstancesRequest): Promise<QueryResourcePackageInstancesResponse>;
    querySavingsPlansDeductLogWithOptions(request: QuerySavingsPlansDeductLogRequest, runtime: $Util.RuntimeOptions): Promise<QuerySavingsPlansDeductLogResponse>;
    querySavingsPlansDeductLog(request: QuerySavingsPlansDeductLogRequest): Promise<QuerySavingsPlansDeductLogResponse>;
    querySavingsPlansDiscountWithOptions(request: QuerySavingsPlansDiscountRequest, runtime: $Util.RuntimeOptions): Promise<QuerySavingsPlansDiscountResponse>;
    querySavingsPlansDiscount(request: QuerySavingsPlansDiscountRequest): Promise<QuerySavingsPlansDiscountResponse>;
    querySavingsPlansInstanceWithOptions(request: QuerySavingsPlansInstanceRequest, runtime: $Util.RuntimeOptions): Promise<QuerySavingsPlansInstanceResponse>;
    querySavingsPlansInstance(request: QuerySavingsPlansInstanceRequest): Promise<QuerySavingsPlansInstanceResponse>;
    querySettleBillWithOptions(request: QuerySettleBillRequest, runtime: $Util.RuntimeOptions): Promise<QuerySettleBillResponse>;
    querySettleBill(request: QuerySettleBillRequest): Promise<QuerySettleBillResponse>;
    querySkuPriceListWithOptions(tmpReq: QuerySkuPriceListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySkuPriceListResponse>;
    querySkuPriceList(request: QuerySkuPriceListRequest): Promise<QuerySkuPriceListResponse>;
    /**
      * *   This API operation has been upgraded to DescribeSplitItemBill. We recommend that you call the [DescribeSplitItemBill](~~208169~~) operation to query split bills. You can call the QuerySplitItemBill operation to query a maximum of 50,000 data rows in a bill.
      * *   The data queried by calling the QuerySplitItemBill operation is consistent with the data that is displayed for the specified billing cycle on the Split Bill page in User Center.
      * *   You can call this operation to query split bills generated within the last 12 months.
      * *   This operation returns split bills only after you activate the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in User Center.
      *
      * @param request QuerySplitItemBillRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QuerySplitItemBillResponse
     */
    querySplitItemBillWithOptions(request: QuerySplitItemBillRequest, runtime: $Util.RuntimeOptions): Promise<QuerySplitItemBillResponse>;
    /**
      * *   This API operation has been upgraded to DescribeSplitItemBill. We recommend that you call the [DescribeSplitItemBill](~~208169~~) operation to query split bills. You can call the QuerySplitItemBill operation to query a maximum of 50,000 data rows in a bill.
      * *   The data queried by calling the QuerySplitItemBill operation is consistent with the data that is displayed for the specified billing cycle on the Split Bill page in User Center.
      * *   You can call this operation to query split bills generated within the last 12 months.
      * *   This operation returns split bills only after you activate the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in User Center.
      *
      * @param request QuerySplitItemBillRequest
      * @return QuerySplitItemBillResponse
     */
    querySplitItemBill(request: QuerySplitItemBillRequest): Promise<QuerySplitItemBillResponse>;
    /**
      * You can call this operation to query the usage data of an Alibaba Cloud service. Take note of the following items:
      * *   The service code that you specify for querying the usage data of a specific Alibaba Cloud service must be valid. You can query the usage data by hour or by day.
      * *   The time that you specify must follow the ISO8601 standard in the yyyy-MM-ddTHH:mm:ssZ format.
      *     *   Latency exists in data pushes. Therefore, if you set the DataType parameter to Hour, the integrity of usage data recorded in the last 24 hours can be ensured. If you set the DataType parameter to Day, the integrity of usage data recorded in the last two days can be ensured.
      *     *   You can query the usage data that is recorded in the last quarter.
      *
      * @param request QueryUserOmsDataRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryUserOmsDataResponse
     */
    queryUserOmsDataWithOptions(request: QueryUserOmsDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryUserOmsDataResponse>;
    /**
      * You can call this operation to query the usage data of an Alibaba Cloud service. Take note of the following items:
      * *   The service code that you specify for querying the usage data of a specific Alibaba Cloud service must be valid. You can query the usage data by hour or by day.
      * *   The time that you specify must follow the ISO8601 standard in the yyyy-MM-ddTHH:mm:ssZ format.
      *     *   Latency exists in data pushes. Therefore, if you set the DataType parameter to Hour, the integrity of usage data recorded in the last 24 hours can be ensured. If you set the DataType parameter to Day, the integrity of usage data recorded in the last two days can be ensured.
      *     *   You can query the usage data that is recorded in the last quarter.
      *
      * @param request QueryUserOmsDataRequest
      * @return QueryUserOmsDataResponse
     */
    queryUserOmsData(request: QueryUserOmsDataRequest): Promise<QueryUserOmsDataResponse>;
    /**
      * 1.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
      * 2.  Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.
      * 3.  For more information, see [Rules for unsubscribing from resources](https://help.aliyun.com/knowledge_detail/116043.html?spm=a2c81.e1d666e.app.2.62ae11271Kd6iM).
      *
      * @param request RefundInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RefundInstanceResponse
     */
    refundInstanceWithOptions(request: RefundInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RefundInstanceResponse>;
    /**
      * 1.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
      * 2.  Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.
      * 3.  For more information, see [Rules for unsubscribing from resources](https://help.aliyun.com/knowledge_detail/116043.html?spm=a2c81.e1d666e.app.2.62ae11271Kd6iM).
      *
      * @param request RefundInstanceRequest
      * @return RefundInstanceResponse
     */
    refundInstance(request: RefundInstanceRequest): Promise<RefundInstanceResponse>;
    /**
      * A value of true indicates that the execution is complete.
      * A value of false indicates that an error occurs during the execution.
      *
      * @param request ReleaseInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReleaseInstanceResponse
     */
    releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseInstanceResponse>;
    /**
      * A value of true indicates that the execution is complete.
      * A value of false indicates that an error occurs during the execution.
      *
      * @param request ReleaseInstanceRequest
      * @return ReleaseInstanceResponse
     */
    releaseInstance(request: ReleaseInstanceRequest): Promise<ReleaseInstanceResponse>;
    relieveAccountRelationWithOptions(request: RelieveAccountRelationRequest, runtime: $Util.RuntimeOptions): Promise<RelieveAccountRelationResponse>;
    relieveAccountRelation(request: RelieveAccountRelationRequest): Promise<RelieveAccountRelationResponse>;
    renewInstanceWithOptions(request: RenewInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RenewInstanceResponse>;
    renewInstance(request: RenewInstanceRequest): Promise<RenewInstanceResponse>;
    renewResourcePackageWithOptions(request: RenewResourcePackageRequest, runtime: $Util.RuntimeOptions): Promise<RenewResourcePackageResponse>;
    renewResourcePackage(request: RenewResourcePackageRequest): Promise<RenewResourcePackageResponse>;
    saveUserCreditWithOptions(request: SaveUserCreditRequest, runtime: $Util.RuntimeOptions): Promise<SaveUserCreditResponse>;
    saveUserCredit(request: SaveUserCreditRequest): Promise<SaveUserCreditResponse>;
    setAllExpirationDayWithOptions(request: SetAllExpirationDayRequest, runtime: $Util.RuntimeOptions): Promise<SetAllExpirationDayResponse>;
    setAllExpirationDay(request: SetAllExpirationDayRequest): Promise<SetAllExpirationDayResponse>;
    setCreditLabelActionWithOptions(request: SetCreditLabelActionRequest, runtime: $Util.RuntimeOptions): Promise<SetCreditLabelActionResponse>;
    setCreditLabelAction(request: SetCreditLabelActionRequest): Promise<SetCreditLabelActionResponse>;
    setRenewalWithOptions(request: SetRenewalRequest, runtime: $Util.RuntimeOptions): Promise<SetRenewalResponse>;
    setRenewal(request: SetRenewalRequest): Promise<SetRenewalResponse>;
    setResellerUserAlarmThresholdWithOptions(request: SetResellerUserAlarmThresholdRequest, runtime: $Util.RuntimeOptions): Promise<SetResellerUserAlarmThresholdResponse>;
    setResellerUserAlarmThreshold(request: SetResellerUserAlarmThresholdRequest): Promise<SetResellerUserAlarmThresholdResponse>;
    setResellerUserQuotaWithOptions(request: SetResellerUserQuotaRequest, runtime: $Util.RuntimeOptions): Promise<SetResellerUserQuotaResponse>;
    setResellerUserQuota(request: SetResellerUserQuotaRequest): Promise<SetResellerUserQuotaResponse>;
    setResellerUserStatusWithOptions(request: SetResellerUserStatusRequest, runtime: $Util.RuntimeOptions): Promise<SetResellerUserStatusResponse>;
    setResellerUserStatus(request: SetResellerUserStatusRequest): Promise<SetResellerUserStatusResponse>;
    subscribeBillToOSSWithOptions(request: SubscribeBillToOSSRequest, runtime: $Util.RuntimeOptions): Promise<SubscribeBillToOSSResponse>;
    subscribeBillToOSS(request: SubscribeBillToOSSRequest): Promise<SubscribeBillToOSSResponse>;
    tagResourcesWithOptions(request: TagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<TagResourcesResponse>;
    tagResources(request: TagResourcesRequest): Promise<TagResourcesResponse>;
    unsubscribeBillToOSSWithOptions(request: UnsubscribeBillToOSSRequest, runtime: $Util.RuntimeOptions): Promise<UnsubscribeBillToOSSResponse>;
    unsubscribeBillToOSS(request: UnsubscribeBillToOSSRequest): Promise<UnsubscribeBillToOSSResponse>;
    untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<UntagResourcesResponse>;
    untagResources(request: UntagResourcesRequest): Promise<UntagResourcesResponse>;
    upgradeResourcePackageWithOptions(request: UpgradeResourcePackageRequest, runtime: $Util.RuntimeOptions): Promise<UpgradeResourcePackageResponse>;
    upgradeResourcePackage(request: UpgradeResourcePackageRequest): Promise<UpgradeResourcePackageResponse>;
}
